// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`aura indexer 1`] = `
Array [
  "force-app/main/default/aura/helloWorldApp/helloWorldApp.app",
  "force-app/main/default/aura/indexApp/indexApp.app",
  "force-app/main/default/aura/lightningExamplesApp/lightningExamplesApp.app",
  "force-app/main/default/aura/todoApp/todoApp.app",
  "force-app/main/default/aura/wireLdsApp/wireLdsApp.app",
  "force-app/main/default/aura/wireLdsCmp/wireLdsCmp.cmp",
]
`;

exports[`aura indexer 2`] = `
Map {
  "aura:application" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Set to true if the component is abstract. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "abstract",
        "type": "Boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates whether the app can be extended by another app outside of a namespace. Possible values are internal (default), public, and global.",
        "location": undefined,
        "memberType": undefined,
        "name": "access",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A brief description of the app.",
        "location": undefined,
        "memberType": undefined,
        "name": "description",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The app to be extended, if applicable. For example, extends='namespace:yourApp'.",
        "location": undefined,
        "memberType": undefined,
        "name": "extends",
        "type": "Component",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates whether the app is extensible by another app. Defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "extensible",
        "type": "Boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A comma-separated list of interfaces that the app implements.",
        "location": undefined,
        "memberType": undefined,
        "name": "implements",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The framework monitors the location of the current window for changes. If the # value in a URL changes, the framework fires an application event. The locationChangeEvent defines this event. The default value is aura:locationChange. The locationChange event has a single attribute called token, which is set with everything after the # value in the URL.",
        "location": undefined,
        "memberType": undefined,
        "name": "locationChangeEvent",
        "type": "Event",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "",
        "location": undefined,
        "memberType": undefined,
        "name": "preload",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Renders the component using client-side or server-side renderers. If not provided, the framework determines any dependencies and whether the application should be rendered client-side or server-side. Valid options are client or server. The default is auto. For example, specify render='client' if you want to inspect the application on the client-side during testing.",
        "location": undefined,
        "memberType": undefined,
        "name": "render",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The support level for the component. Valid options are PROTO, DEPRECATED, BETA, or GA.",
        "location": undefined,
        "memberType": undefined,
        "name": "support",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of the template used to bootstrap the loading of the framework and the app. The default value is aura:template. You can customize the template by creating your own component that extends the default template. For example: <aura:component extends='aura:template' ... >",
        "location": undefined,
        "memberType": undefined,
        "name": "template",
        "type": "Component",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Preserves or removes unnecessary whitespace in the component markup. Valid options are preserve or optimize. The default is optimize.",
        "location": undefined,
        "memberType": undefined,
        "name": "whitespace",
        "type": "String",
      },
    ],
    "documentation": "An app is a special top-level component whose markup is in a .app file. The markup looks similar to HTML and can contain components as well as a set of supported HTML tags. The .app file is a standalone entry point for the app and enables you to define the overall application layout, style sheets, and global JavaScript includes. It starts with the top-level <aura:application> tag, which contains optional system attributes. These system attributes tell the framework how to configure the app.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:application",
    "namespace": "aura",
    "properties": undefined,
    "type": 1,
  },
  "aura:attribute" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates whether the attribute can be used outside of its own namespace. Possible values are internal (default), private, public, and global.",
        "location": undefined,
        "memberType": undefined,
        "name": "access",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The default value for the attribute, which can be overwritten as needed. When setting a default value, expressions using the $Label, $Locale, and $Browser global value providers are supported. Alternatively, to set a dynamic default, use an init event. See <a href='http://aura-oss-dev.herokuapp.com/en-us/main/aura-oss/js_cb_init_handler.htm'>Invoking Actions on Component Initialization</a>",
        "location": undefined,
        "memberType": undefined,
        "name": "default",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A summary of the attribute and its usage.",
        "location": undefined,
        "memberType": undefined,
        "name": "description",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Required. The name of the attribute. For example, if you set <aura:attribute name='isTrue' type='Boolean' /> on a component called aura:newCmp, you can set this attribute when you instantiate the component; for example,<aura:newCmp isTrue='false' />.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Determines if the attribute is required. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "Boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Required. The type of the attribute. For a list of basic types supported, see <a href='http://aura-oss-dev.herokuapp.com/en-us/main/aura-oss/ref_attr_types_basic.htm'>Basic Types</a>",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "String",
      },
    ],
    "documentation": "aura:attribute describes an attribute available on an app, interface, component, or event.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:attribute",
    "namespace": "aura",
    "properties": undefined,
    "type": 1,
  },
  "aura:component" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "The root of the component hierarchy. Provides a default rendering implementation.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:component",
    "namespace": "aura",
    "properties": undefined,
    "type": 0,
  },
  "aura:dependency" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The description of this dependency.",
        "location": undefined,
        "memberType": undefined,
        "name": "description",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The resource that the component depends on. For example, resource='markup://sampleNamespace:sampleComponent' refers to the sampleComponent in the sampleNamespace namespace. Use an asterisk (*) in the resource name for wildcard matching. For example, resource='markup://sampleNamespace:*' matches everything in the namespace; resource='markup://sampleNamespace:input*' matches everything in the namespace that starts with input. Don’t use an asterisk (*) in the namespace portion of the resource name. For example, resource='markup://sample*:sampleComponent' is not supported.",
        "location": undefined,
        "memberType": undefined,
        "name": "resource",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The type of resource that the component depends on. The default value is COMPONENT. Use type='*' to match all types of resources. The most commonly used values are: COMPONENT, APPLICATION, EVENT. Use a comma-separated list for multiple types; for example: COMPONENT,APPLICATION.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "String",
      },
    ],
    "documentation": "The <aura:dependency> tag enables you to declare dependencies that can't easily be discovered by the framework. The framework automatically tracks dependencies between definitions, such as components. This enables the framework to automatically reload when it detects that you've changed a definition during development. However, if a component uses a client- or server-side provider that instantiates components that are not directly referenced in the component’s markup, use <aura:dependency> in the component’s markup to explicitly tell the framework about the dependency. Adding the <aura:dependency> tag ensures that a component and its dependencies are sent to the client, when needed. For example, adding this tag to a component marks the aura:placeholder component as a dependency.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:dependency",
    "namespace": "aura",
    "properties": undefined,
    "type": 1,
  },
  "aura:event" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates whether the event can be extended or used outside of its own namespace. Possible values are internal (default), public, and global.",
        "location": undefined,
        "memberType": undefined,
        "name": "access",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A description of the event.",
        "location": undefined,
        "memberType": undefined,
        "name": "description",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The event to be extended. For example, extends='namespace:myEvent'.",
        "location": undefined,
        "memberType": undefined,
        "name": "extends",
        "type": "Component",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The support level for the event. Valid options are PROTO, DEPRECATED, BETA, or GA.",
        "location": undefined,
        "memberType": undefined,
        "name": "support",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Required. Possible values are COMPONENT or APPLICATION.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "String",
      },
    ],
    "documentation": "An event is represented by the aura:event tag, which has the following attributes.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:event",
    "namespace": "aura",
    "properties": undefined,
    "type": 1,
  },
  "aura:expression" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The expression to evaluate and render.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Renders the value to which an expression evaluates. Creates an instance of this component which renders the                         referenced \\"property reference value\\" set to the value attribute when expressions are found in free text or markup.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:expression",
    "namespace": "aura",
    "properties": undefined,
    "type": 0,
  },
  "aura:handler" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The client-side controller action that handles the value change. Example: action='{!c.handleApplicationEvent}'",
        "location": undefined,
        "memberType": undefined,
        "name": "action",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The description of the handler",
        "location": undefined,
        "memberType": undefined,
        "name": "description",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The event name to be handled. Example: event='namespace:MyEvent'",
        "location": undefined,
        "memberType": undefined,
        "name": "event",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of the handler. Example: name='init'.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value that is initialized, for example {!this}.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "String",
      },
    ],
    "documentation": "A client-side controller handles events within a component. It’s a JavaScript file that defines the functions for all of the component's actions.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:handler",
    "namespace": "aura",
    "properties": undefined,
    "type": 1,
  },
  "aura:html" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component.  In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A Map of attributes to set on the html element.",
        "location": undefined,
        "memberType": undefined,
        "name": "HTMLAttributes",
        "type": "map",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of the html element that should be rendered.",
        "location": undefined,
        "memberType": undefined,
        "name": "tag",
        "type": "string",
      },
    ],
    "documentation": "A meta component that represents all html elements.  Any html found in your markup causes the creation of one of these.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:html",
    "namespace": "aura",
    "properties": undefined,
    "type": 0,
  },
  "aura:if" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The components to render when isTrue evaluates to true.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "componentdefref[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The alternative to render when isTrue evaluates to false, and the body is not rendered.  Should always be set using the aura:set tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "else",
        "type": "componentdefref[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "An expression that must be fulfilled in order to display the body.",
        "location": undefined,
        "memberType": undefined,
        "name": "isTrue",
        "type": "boolean",
      },
    ],
    "documentation": "Conditionally instantiates and renders either the body or the components in the else attribute.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:if",
    "namespace": "aura",
    "properties": undefined,
    "type": 0,
  },
  "aura:interface" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates whether the interface can be extended or used outside of its own namespace. Possible values are internal (default), public, and global.",
        "location": undefined,
        "memberType": undefined,
        "name": "access",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A description of the interface.",
        "location": undefined,
        "memberType": undefined,
        "name": "description",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The comma-seperated list of interfaces to be extended. For example, extends='namespace:intfB'",
        "location": undefined,
        "memberType": undefined,
        "name": "extends",
        "type": "Component",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The support level for the interface. Valid options are PROTO, DEPRECATED, BETA, or GA.",
        "location": undefined,
        "memberType": undefined,
        "name": "support",
        "type": "String",
      },
    ],
    "documentation": "Object-oriented languages, such as Java, support the concept of an interface that defines a set of method signatures. A class that implements the interface must provide the method implementations. An interface in Java can't be instantiated directly, but a class that implements the interface can. Similarly, Aura supports the concept of interfaces that define a component's shape by defining its attributes.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:interface",
    "namespace": "aura",
    "properties": undefined,
    "type": 1,
  },
  "aura:iteration" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Template to use when creating components for each iteration.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "componentdefref[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The index of the collection to stop at (exclusive)",
        "location": undefined,
        "memberType": undefined,
        "name": "end",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of variable to use for the index of each item inside the iteration",
        "location": undefined,
        "memberType": undefined,
        "name": "indexVar",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The collection of data to iterate over",
        "location": undefined,
        "memberType": undefined,
        "name": "items",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "True if the iteration has finished loading the set of templates.",
        "location": undefined,
        "memberType": undefined,
        "name": "loaded",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The index of the collection to start at (inclusive)",
        "location": undefined,
        "memberType": undefined,
        "name": "start",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The template that is used to generate components. By default, this is set from the body markup on first load.",
        "location": undefined,
        "memberType": undefined,
        "name": "template",
        "type": "componentdefref[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of the variable to use for each item inside the iteration",
        "location": undefined,
        "memberType": undefined,
        "name": "var",
        "type": "string",
      },
    ],
    "documentation": "Renders a view of a collection of items. Supports iterations containing components that can be created exclusively on the client-side.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:iteration",
    "namespace": "aura",
    "properties": undefined,
    "type": 0,
  },
  "aura:method" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The access control for the method. Valid values are: internal (system namespaces), public (same namespace), global (any namespace)",
        "location": undefined,
        "memberType": undefined,
        "name": "access",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The client-side controller action to execute. For example: action='{!c.sampleAction}''. sampleAction is an action in the client-side controller. If you don’t specify an action value, the controller action defaults to the value of the method name.",
        "location": undefined,
        "memberType": undefined,
        "name": "action",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The method description.",
        "location": undefined,
        "memberType": undefined,
        "name": "description",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The method name. Use the method name to call the method in JavaScript code. For example: cmp.sampleMethod(param1);",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "String",
      },
    ],
    "documentation": "Use <aura:method> to define a method as part of a component's API. This enables you to directly call a method in a component’s client-side controller instead of firing and handling a component event. Using <aura:method> simplifies the code needed for a parent component to call a method on a child component that it contains.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:method",
    "namespace": "aura",
    "properties": undefined,
    "type": 1,
  },
  "aura:registerEvent" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The description of this registered event",
        "location": undefined,
        "memberType": undefined,
        "name": "description",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name this registered event will be referred to by. Example: type='myEvent'. You can now access this event by calling component.get('e.myEvent')",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The event that this component may fire. Example: type='force:showQuickAction'",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "String",
      },
    ],
    "documentation": "Registers an event that your component will fire as part of its lifecycle.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:registerEvent",
    "namespace": "aura",
    "properties": undefined,
    "type": 1,
  },
  "aura:renderIf" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The alternative content to render when isTrue evaluates to false, and the body is not rendered. Set using the <aura:set> tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "else",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "An expression that must evaluate to true to display the body of the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "isTrue",
        "type": "boolean",
      },
    ],
    "documentation": "Deprecated. Use aura:if instead. This component allows you to conditionally render its contents. It renders its body only if isTrue evaluates to true. The else attribute allows you to render an alternative when isTrue evaluates to false.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:renderIf",
    "namespace": "aura",
    "properties": undefined,
    "type": 0,
  },
  "aura:rootComponent" => TagInfo {
    "attributes": Array [],
    "documentation": "This is a marker interface for top-level components like aura:component, aura:expression, and aura:html",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:rootComponent",
    "namespace": "aura",
    "properties": undefined,
    "type": 0,
  },
  "aura:set" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The attribute name to set",
        "location": undefined,
        "memberType": undefined,
        "name": "attribute",
        "type": "String",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value to set on this attribute",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "String",
      },
    ],
    "documentation": "Use <aura:set> in markup to set the value of an attribute inherited from a super component, event, or interface.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:set",
    "namespace": "aura",
    "properties": undefined,
    "type": 1,
  },
  "aura:template" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The block of content that is rendered before Aura initialization.",
        "location": undefined,
        "memberType": undefined,
        "name": "auraPreInitBlock",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Extra body CSS styles",
        "location": undefined,
        "memberType": undefined,
        "name": "bodyClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Default body CSS styles.",
        "location": undefined,
        "memberType": undefined,
        "name": "defaultBodyClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The DOCTYPE declaration for the template.",
        "location": undefined,
        "memberType": undefined,
        "name": "doctype",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error loading text",
        "location": undefined,
        "memberType": undefined,
        "name": "errorMessage",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error title when an error has occurred.",
        "location": undefined,
        "memberType": undefined,
        "name": "errorTitle",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Loading text",
        "location": undefined,
        "memberType": undefined,
        "name": "loadingText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The title of the template.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Default template used to bootstrap Aura framework. To use another template, extend aura:template and set attributes using aura:set.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:template",
    "namespace": "aura",
    "properties": undefined,
    "type": 0,
  },
  "aura:text" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The String to be rendered.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Renders plain text.  When any free text (not a tag or attribute value) is found in markup, an instance of this component is created with the value attribute set to the text found in the markup.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:text",
    "namespace": "aura",
    "properties": undefined,
    "type": 0,
  },
  "aura:unescapedHtml" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of <aura:unescapedHtml> is ignored and won't be rendered.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The string that should be rendered as unescaped HTML.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "The value assigned to this component will be rendered as-is, without altering its contents. It's intended for outputting pre-formatted HTML, for example, where the formatting is arbitrary, or expensive to calculate. The body of this component is ignored, and won't be rendered. Warning: this component outputs value as unescaped HTML, which introduces the possibility of security vulnerabilities in your code. You must sanitize user input before rendering it unescaped, or you will create a cross-site scripting (XSS) vulnerability. Only use <aura:unescapedHtml> with trusted or sanitized sources of data.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "aura:unescapedHtml",
    "namespace": "aura",
    "properties": undefined,
    "type": 0,
  },
  "c:helloWorld" => TagInfo {
    "attributes": Array [],
    "documentation": "",
    "file": "force-app/main/default/lwc/hello_world/hello_world.js",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 61,
          "line": 2,
        },
        "start": Object {
          "character": 0,
          "line": 2,
        },
      },
      "uri": "force-app/main/default/lwc/hello_world/hello_world.js",
    },
    "lwc": true,
    "methods": Array [],
    "name": "c:helloWorld",
    "namespace": "c",
    "properties": Array [],
    "type": 2,
  },
  "c:helloWorldApp" => TagInfo {
    "attributes": Array [],
    "documentation": "",
    "file": "force-app/main/default/aura/helloWorldApp/helloWorldApp.app",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 19,
          "line": 5,
        },
        "start": Object {
          "character": 1,
          "line": 1,
        },
      },
      "uri": "force-app/main/default/aura/helloWorldApp/helloWorldApp.app",
    },
    "lwc": false,
    "methods": undefined,
    "name": "c:helloWorldApp",
    "namespace": "c",
    "properties": undefined,
    "type": 2,
  },
  "c:importRelative" => TagInfo {
    "attributes": Array [],
    "documentation": "",
    "file": "force-app/main/default/lwc/import_relative/import_relative.js",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 1,
          "line": 6,
        },
        "start": Object {
          "character": 0,
          "line": 2,
        },
      },
      "uri": "force-app/main/default/lwc/import_relative/import_relative.js",
    },
    "lwc": true,
    "methods": Array [],
    "name": "c:importRelative",
    "namespace": "c",
    "properties": Array [
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 6,
          },
          "start": Object {
            "column": 4,
            "line": 4,
          },
        },
        "name": "message",
        "type": "property",
      },
    ],
    "type": 2,
  },
  "c:index" => TagInfo {
    "attributes": Array [],
    "documentation": "",
    "file": "force-app/main/default/lwc/index/index.js",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 56,
          "line": 2,
        },
        "start": Object {
          "character": 0,
          "line": 2,
        },
      },
      "uri": "force-app/main/default/lwc/index/index.js",
    },
    "lwc": true,
    "methods": Array [],
    "name": "c:index",
    "namespace": "c",
    "properties": Array [],
    "type": 2,
  },
  "c:indexApp" => TagInfo {
    "attributes": Array [],
    "documentation": "",
    "file": "force-app/main/default/aura/indexApp/indexApp.app",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 19,
          "line": 3,
        },
        "start": Object {
          "character": 1,
          "line": 1,
        },
      },
      "uri": "force-app/main/default/aura/indexApp/indexApp.app",
    },
    "lwc": false,
    "methods": undefined,
    "name": "c:indexApp",
    "namespace": "c",
    "properties": undefined,
    "type": 2,
  },
  "c:lightningDatatableExample" => TagInfo {
    "attributes": Array [],
    "documentation": "",
    "file": "force-app/main/default/lwc/lightning_datatable_example/lightning_datatable_example.js",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 1,
          "line": 39,
        },
        "start": Object {
          "character": 0,
          "line": 2,
        },
      },
      "uri": "force-app/main/default/lwc/lightning_datatable_example/lightning_datatable_example.js",
    },
    "lwc": true,
    "methods": Array [],
    "name": "c:lightningDatatableExample",
    "namespace": "c",
    "properties": Array [
      Object {
        "loc": Object {
          "end": Object {
            "column": 6,
            "line": 14,
          },
          "start": Object {
            "column": 4,
            "line": 4,
          },
        },
        "name": "columns",
        "type": "property",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 7,
            "line": 39,
          },
          "start": Object {
            "column": 4,
            "line": 16,
          },
        },
        "name": "data",
        "type": "property",
      },
    ],
    "type": 2,
  },
  "c:lightningExamplesApp" => TagInfo {
    "attributes": Array [],
    "documentation": "",
    "file": "force-app/main/default/aura/lightningExamplesApp/lightningExamplesApp.app",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 19,
          "line": 13,
        },
        "start": Object {
          "character": 1,
          "line": 1,
        },
      },
      "uri": "force-app/main/default/aura/lightningExamplesApp/lightningExamplesApp.app",
    },
    "lwc": false,
    "methods": undefined,
    "name": "c:lightningExamplesApp",
    "namespace": "c",
    "properties": undefined,
    "type": 2,
  },
  "c:lightningTreeExample" => TagInfo {
    "attributes": Array [],
    "documentation": "",
    "file": "force-app/main/default/lwc/lightning_tree_example/lightning_tree_example.js",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 1,
          "line": 44,
        },
        "start": Object {
          "character": 0,
          "line": 2,
        },
      },
      "uri": "force-app/main/default/lwc/lightning_tree_example/lightning_tree_example.js",
    },
    "lwc": true,
    "methods": Array [],
    "name": "c:lightningTreeExample",
    "namespace": "c",
    "properties": Array [
      Object {
        "loc": Object {
          "end": Object {
            "column": 7,
            "line": 44,
          },
          "start": Object {
            "column": 4,
            "line": 4,
          },
        },
        "name": "items",
        "type": "property",
      },
    ],
    "type": 2,
  },
  "c:todo" => TagInfo {
    "attributes": Array [],
    "documentation": "",
    "file": "force-app/main/default/lwc/todo/todo.js",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 1,
          "line": 127,
        },
        "start": Object {
          "character": 0,
          "line": 16,
        },
      },
      "uri": "force-app/main/default/lwc/todo/todo.js",
    },
    "lwc": true,
    "methods": Array [
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 79,
          },
          "start": Object {
            "column": 4,
            "line": 77,
          },
        },
        "name": "setTodos",
        "type": "method",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 92,
          },
          "start": Object {
            "column": 4,
            "line": 81,
          },
        },
        "name": "addNewTodo",
        "type": "method",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 102,
          },
          "start": Object {
            "column": 4,
            "line": 94,
          },
        },
        "name": "handleKeyDown",
        "type": "method",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 106,
          },
          "start": Object {
            "column": 4,
            "line": 104,
          },
        },
        "name": "handleTodoRemove",
        "type": "method",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 117,
          },
          "start": Object {
            "column": 4,
            "line": 108,
          },
        },
        "name": "handleTodoUpdate",
        "type": "method",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 123,
          },
          "start": Object {
            "column": 4,
            "line": 119,
          },
        },
        "name": "handleToggleAll",
        "type": "method",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 127,
          },
          "start": Object {
            "column": 4,
            "line": 125,
          },
        },
        "name": "handleClearCompleted",
        "type": "method",
      },
    ],
    "name": "c:todo",
    "namespace": "c",
    "properties": Array [
      Object {
        "decorator": "track",
        "loc": Object {
          "end": Object {
            "column": 17,
            "line": 18,
          },
          "start": Object {
            "column": 4,
            "line": 18,
          },
        },
        "name": "todos",
        "type": "property",
      },
      Object {
        "decorator": "track",
        "loc": Object {
          "end": Object {
            "column": 18,
            "line": 19,
          },
          "start": Object {
            "column": 4,
            "line": 19,
          },
        },
        "name": "filter",
        "type": "property",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 30,
          },
          "start": Object {
            "column": 4,
            "line": 28,
          },
        },
        "name": "hasTodos",
        "type": "property",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 43,
          },
          "start": Object {
            "column": 4,
            "line": 32,
          },
        },
        "name": "filteredTodos",
        "type": "property",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 47,
          },
          "start": Object {
            "column": 4,
            "line": 45,
          },
        },
        "name": "completedTodos",
        "type": "property",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 51,
          },
          "start": Object {
            "column": 4,
            "line": 49,
          },
        },
        "name": "countTodos",
        "type": "property",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 55,
          },
          "start": Object {
            "column": 4,
            "line": 53,
          },
        },
        "name": "activeTodos",
        "type": "property",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 59,
          },
          "start": Object {
            "column": 4,
            "line": 57,
          },
        },
        "name": "isAllTodosCompleted",
        "type": "property",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 63,
          },
          "start": Object {
            "column": 4,
            "line": 61,
          },
        },
        "name": "remainingItemsLabel",
        "type": "property",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 67,
          },
          "start": Object {
            "column": 4,
            "line": 65,
          },
        },
        "name": "allFilterStyle",
        "type": "property",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 71,
          },
          "start": Object {
            "column": 4,
            "line": 69,
          },
        },
        "name": "activeFilterStyle",
        "type": "property",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 75,
          },
          "start": Object {
            "column": 4,
            "line": 73,
          },
        },
        "name": "completedFilterStyle",
        "type": "property",
      },
    ],
    "type": 2,
  },
  "c:todoApp" => TagInfo {
    "attributes": Array [],
    "documentation": "",
    "file": "force-app/main/default/aura/todoApp/todoApp.app",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 19,
          "line": 4,
        },
        "start": Object {
          "character": 1,
          "line": 1,
        },
      },
      "uri": "force-app/main/default/aura/todoApp/todoApp.app",
    },
    "lwc": false,
    "methods": undefined,
    "name": "c:todoApp",
    "namespace": "c",
    "properties": undefined,
    "type": 2,
  },
  "c:todoItem" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": 0,
        "detail": "",
        "documentation": undefined,
        "location": Object {
          "range": Object {
            "end": Object {
              "character": 13,
              "line": 28,
            },
            "start": Object {
              "character": 4,
              "line": 27,
            },
          },
          "uri": "force-app/main/default/lwc/todo_item/todo_item.js",
        },
        "memberType": 0,
        "name": "nextLine",
        "type": undefined,
      },
      AttributeInfo {
        "decorator": 0,
        "detail": "",
        "documentation": undefined,
        "location": Object {
          "range": Object {
            "end": Object {
              "character": 18,
              "line": 25,
            },
            "start": Object {
              "character": 4,
              "line": 25,
            },
          },
          "uri": "force-app/main/default/lwc/todo_item/todo_item.js",
        },
        "memberType": 0,
        "name": "sameLine",
        "type": undefined,
      },
      AttributeInfo {
        "decorator": 0,
        "detail": "",
        "documentation": "todo jsdoc",
        "location": Object {
          "range": Object {
            "end": Object {
              "character": 5,
              "line": 17,
            },
            "start": Object {
              "character": 4,
              "line": 14,
            },
          },
          "uri": "force-app/main/default/lwc/todo_item/todo_item.js",
        },
        "memberType": 0,
        "name": "todo",
        "type": undefined,
      },
    ],
    "documentation": "TodoItem doc",
    "file": "force-app/main/default/lwc/todo_item/todo_item.js",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 1,
          "line": 90,
        },
        "start": Object {
          "character": 0,
          "line": 6,
        },
      },
      "uri": "force-app/main/default/lwc/todo_item/todo_item.js",
    },
    "lwc": true,
    "methods": Array [
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 37,
          },
          "start": Object {
            "column": 4,
            "line": 31,
          },
        },
        "name": "fireUpdate",
        "type": "method",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 42,
          },
          "start": Object {
            "column": 4,
            "line": 39,
          },
        },
        "name": "fireRemove",
        "type": "method",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 46,
          },
          "start": Object {
            "column": 4,
            "line": 44,
          },
        },
        "name": "handleCompletedInput",
        "type": "method",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 50,
          },
          "start": Object {
            "column": 4,
            "line": 48,
          },
        },
        "name": "handleRemoveInput",
        "type": "method",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 56,
          },
          "start": Object {
            "column": 4,
            "line": 52,
          },
        },
        "name": "handleEditModeInput",
        "type": "method",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 62,
          },
          "start": Object {
            "column": 4,
            "line": 58,
          },
        },
        "name": "handleBlur",
        "type": "method",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 71,
          },
          "start": Object {
            "column": 4,
            "line": 64,
          },
        },
        "name": "handleTitleInput",
        "type": "method",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 84,
          },
          "start": Object {
            "column": 4,
            "line": 73,
          },
        },
        "name": "handleKeyDown",
        "type": "method",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 90,
          },
          "start": Object {
            "column": 4,
            "line": 86,
          },
        },
        "name": "renderedCallback",
        "type": "method",
      },
    ],
    "name": "c:todoItem",
    "namespace": "c",
    "properties": Array [
      Object {
        "decorator": "track",
        "loc": Object {
          "end": Object {
            "column": 20,
            "line": 9,
          },
          "start": Object {
            "column": 4,
            "line": 8,
          },
        },
        "name": "editing",
        "type": "property",
      },
      Object {
        "decorator": "api",
        "doc": "todo jsdoc",
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 18,
          },
          "start": Object {
            "column": 4,
            "line": 15,
          },
        },
        "name": "todo",
        "type": "property",
      },
      Object {
        "decorator": "api",
        "loc": Object {
          "end": Object {
            "column": 18,
            "line": 26,
          },
          "start": Object {
            "column": 4,
            "line": 26,
          },
        },
        "name": "sameLine",
        "type": "property",
        "value": Object {
          "type": "unresolved",
        },
      },
      Object {
        "decorator": "api",
        "loc": Object {
          "end": Object {
            "column": 13,
            "line": 29,
          },
          "start": Object {
            "column": 4,
            "line": 28,
          },
        },
        "name": "nextLine",
        "type": "property",
        "value": Object {
          "type": "unresolved",
        },
      },
    ],
    "type": 2,
  },
  "c:todoUtil" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": 0,
        "detail": "",
        "documentation": undefined,
        "location": Object {
          "range": Object {
            "end": Object {
              "character": 13,
              "line": 7,
            },
            "start": Object {
              "character": 4,
              "line": 6,
            },
          },
          "uri": "utils/meta/lwc/todo_util/todo_util.js",
        },
        "memberType": 0,
        "name": "iconName",
        "type": undefined,
      },
      AttributeInfo {
        "decorator": 0,
        "detail": "",
        "documentation": undefined,
        "location": Object {
          "range": Object {
            "end": Object {
              "character": 9,
              "line": 4,
            },
            "start": Object {
              "character": 4,
              "line": 3,
            },
          },
          "uri": "utils/meta/lwc/todo_util/todo_util.js",
        },
        "memberType": 0,
        "name": "info",
        "type": undefined,
      },
      AttributeInfo {
        "decorator": 0,
        "detail": "",
        "documentation": undefined,
        "location": Object {
          "range": Object {
            "end": Object {
              "character": 13,
              "line": 10,
            },
            "start": Object {
              "character": 4,
              "line": 9,
            },
          },
          "uri": "utils/meta/lwc/todo_util/todo_util.js",
        },
        "memberType": 0,
        "name": "upperCASE",
        "type": undefined,
      },
    ],
    "documentation": "",
    "file": "utils/meta/lwc/todo_util/todo_util.js",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 1,
          "line": 20,
        },
        "start": Object {
          "character": 0,
          "line": 2,
        },
      },
      "uri": "utils/meta/lwc/todo_util/todo_util.js",
    },
    "lwc": true,
    "methods": Array [
      Object {
        "loc": Object {
          "end": Object {
            "column": 5,
            "line": 20,
          },
          "start": Object {
            "column": 4,
            "line": 18,
          },
        },
        "name": "privateMethod",
        "type": "method",
      },
    ],
    "name": "c:todoUtil",
    "namespace": "c",
    "properties": Array [
      Object {
        "decorator": "api",
        "loc": Object {
          "end": Object {
            "column": 9,
            "line": 5,
          },
          "start": Object {
            "column": 4,
            "line": 4,
          },
        },
        "name": "info",
        "type": "property",
        "value": Object {
          "type": "unresolved",
        },
      },
      Object {
        "decorator": "api",
        "loc": Object {
          "end": Object {
            "column": 13,
            "line": 8,
          },
          "start": Object {
            "column": 4,
            "line": 7,
          },
        },
        "name": "iconName",
        "type": "property",
        "value": Object {
          "type": "unresolved",
        },
      },
      Object {
        "decorator": "api",
        "loc": Object {
          "end": Object {
            "column": 13,
            "line": 11,
          },
          "start": Object {
            "column": 4,
            "line": 10,
          },
        },
        "name": "upperCASE",
        "type": "property",
        "value": Object {
          "type": "unresolved",
        },
      },
      Object {
        "decorator": "track",
        "loc": Object {
          "end": Object {
            "column": 18,
            "line": 14,
          },
          "start": Object {
            "column": 4,
            "line": 13,
          },
        },
        "name": "trackProperty",
        "type": "property",
      },
      Object {
        "loc": Object {
          "end": Object {
            "column": 20,
            "line": 16,
          },
          "start": Object {
            "column": 4,
            "line": 16,
          },
        },
        "name": "privateProperty",
        "type": "property",
      },
    ],
    "type": 2,
  },
  "c:todoUtils" => TagInfo {
    "attributes": Array [],
    "documentation": "",
    "file": "utils/meta/lwc/todo_utils/todo_utils.js",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 0,
          "line": 0,
        },
        "start": Object {
          "character": 0,
          "line": 0,
        },
      },
      "uri": "utils/meta/lwc/todo_utils/todo_utils.js",
    },
    "lwc": true,
    "methods": Array [],
    "name": "c:todoUtils",
    "namespace": "c",
    "properties": Array [],
    "type": 2,
  },
  "c:utils" => TagInfo {
    "attributes": Array [],
    "documentation": "",
    "file": "force-app/main/default/lwc/utils/utils.js",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 0,
          "line": 0,
        },
        "start": Object {
          "character": 0,
          "line": 0,
        },
      },
      "uri": "force-app/main/default/lwc/utils/utils.js",
    },
    "lwc": true,
    "methods": Array [],
    "name": "c:utils",
    "namespace": "c",
    "properties": Array [],
    "type": 2,
  },
  "c:wireLdsApp" => TagInfo {
    "attributes": Array [],
    "documentation": "",
    "file": "force-app/main/default/aura/wireLdsApp/wireLdsApp.app",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 19,
          "line": 3,
        },
        "start": Object {
          "character": 1,
          "line": 1,
        },
      },
      "uri": "force-app/main/default/aura/wireLdsApp/wireLdsApp.app",
    },
    "lwc": false,
    "methods": undefined,
    "name": "c:wireLdsApp",
    "namespace": "c",
    "properties": undefined,
    "type": 2,
  },
  "c:wireLdsCmp" => TagInfo {
    "attributes": Array [],
    "documentation": "",
    "file": "force-app/main/default/aura/wireLdsCmp/wireLdsCmp.cmp",
    "location": Object {
      "range": Object {
        "end": Object {
          "character": 17,
          "line": 3,
        },
        "start": Object {
          "character": 1,
          "line": 1,
        },
      },
      "uri": "force-app/main/default/aura/wireLdsCmp/wireLdsCmp.cmp",
    },
    "lwc": false,
    "methods": undefined,
    "name": "c:wireLdsCmp",
    "namespace": "c",
    "properties": undefined,
    "type": 2,
  },
  "clients:availableForMailAppAppPage" => TagInfo {
    "attributes": Array [],
    "documentation": "Marker Interface that allows components to show up in the Lightning for Gmail or Lightning For Outlook Flexipages",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "clients:availableForMailAppAppPage",
    "namespace": "clients",
    "properties": undefined,
    "type": 0,
  },
  "clients:hasEventContext" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "READONLY - An object representing the item context pertinent to the appointment.",
        "location": undefined,
        "memberType": undefined,
        "name": "dates",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "READONLY - The location of the current event.",
        "location": undefined,
        "memberType": undefined,
        "name": "location",
        "type": "string",
      },
    ],
    "documentation": "Context for event information. Use this interface to interact with the mail clients.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "clients:hasEventContext",
    "namespace": "clients",
    "properties": undefined,
    "type": 0,
  },
  "clients:hasItemContext" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "READONLY - The body of the current item in plain text",
        "location": undefined,
        "memberType": undefined,
        "name": "messageBody",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "READONLY - An enum indicating the mode of the item. Possible values are 'view', 'edit'",
        "location": undefined,
        "memberType": undefined,
        "name": "mode",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "READONLY - An object representing the contacts on the current item.",
        "location": undefined,
        "memberType": undefined,
        "name": "people",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "READONLY - An enum indicating where the source is coming from. Possible values are 'email', 'event'",
        "location": undefined,
        "memberType": undefined,
        "name": "source",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "READONLY - The subject of the current item.",
        "location": undefined,
        "memberType": undefined,
        "name": "subject",
        "type": "string",
      },
    ],
    "documentation": "Context Shape for Email / Event Components. Use this interface to interact with the mail clients.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "clients:hasItemContext",
    "namespace": "clients",
    "properties": undefined,
    "type": 0,
  },
  "design:component" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "String",
      },
    ],
    "documentation": "",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "design:component",
    "namespace": "aura",
    "properties": undefined,
    "type": 1,
  },
  "flexipage:availableForAllPageTypes" => TagInfo {
    "attributes": Array [],
    "documentation": "Marks a component as being able to be used inside a Lightning App Builder page",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "flexipage:availableForAllPageTypes",
    "namespace": "flexipage",
    "properties": undefined,
    "type": 0,
  },
  "flexipage:availableForRecordHome" => TagInfo {
    "attributes": Array [],
    "documentation": "Able to be used inside a Record Home Lightning App Builder page",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "flexipage:availableForRecordHome",
    "namespace": "flexipage",
    "properties": undefined,
    "type": 0,
  },
  "force:appHostable" => TagInfo {
    "attributes": Array [],
    "documentation": null,
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "force:appHostable",
    "namespace": "force",
    "properties": undefined,
    "type": 0,
  },
  "force:canvasApp" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Name or label of the canvas app. Used to display the app's name while Canvas is loading.",
        "location": undefined,
        "memberType": undefined,
        "name": "applicationName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Width of the canvas app border, in pixels. If not specified, defaults to 0 px.",
        "location": undefined,
        "memberType": undefined,
        "name": "border",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "An unique label within a page for the Canvas app window. This should be used when targeting events to this canvas app.",
        "location": undefined,
        "memberType": undefined,
        "name": "canvasId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "An html element id in which canvas app is rendered. The container needs to be defined before canvasApp cmp usage.",
        "location": undefined,
        "memberType": undefined,
        "name": "containerId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "API name of the canvas app. This name is defined when the canvas app is created and can be viewed in the Canvas App Previewer. Either developerName or referenceId is required.",
        "location": undefined,
        "memberType": undefined,
        "name": "developerName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The location in the application where the canvas app is currently being called from.",
        "location": undefined,
        "memberType": undefined,
        "name": "displayLocation",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Canvas app window height, in pixels. If not specified, defaults to 900 px.",
        "location": undefined,
        "memberType": undefined,
        "name": "height",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum height of the Canvas app window in pixels. Defaults to 2000 px; 'infinite' is also a valid value.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxHeight",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum width of the Canvas app window in pixels. Defaults to 1000 px; 'infinite' is also a valid value.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxWidth",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Namespace value of the Developer Edition organization in which the canvas app was created. Optional if the canvas app wasn’t created in a Developer Edition organization. If not specified, defaults to null.",
        "location": undefined,
        "memberType": undefined,
        "name": "namespacePrefix",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered if the canvas app fails to render.",
        "location": undefined,
        "memberType": undefined,
        "name": "onCanvasAppError",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the canvas app loads.",
        "location": undefined,
        "memberType": undefined,
        "name": "onCanvasAppLoad",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered after the canvas app registers with the parent.",
        "location": undefined,
        "memberType": undefined,
        "name": "onCanvasSubscribed",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Object representation of parameters passed to the canvas app. This should be supplied in JSON format or as a JavaScript object literal. Here’s an example of parameters in a JavaScript object literal: {param1:'value1',param2:'value2'}. If not specified, defaults to null.",
        "location": undefined,
        "memberType": undefined,
        "name": "parameters",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The referenceId attribute is deprecated. Use developerName instead.",
        "location": undefined,
        "memberType": undefined,
        "name": "referenceId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Canvas window scrolling",
        "location": undefined,
        "memberType": undefined,
        "name": "scrolling",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The sublocation is the location in the application where the canvas app is currently being called from, for ex, displayLocation can be PageLayout and sublocation can be S1MobileCardPreview or S1MobileCardFullview, etc",
        "location": undefined,
        "memberType": undefined,
        "name": "sublocation",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Title for the link",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Renders a link if set to true",
        "location": undefined,
        "memberType": undefined,
        "name": "watermark",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Canvas app window width, in pixels. If not specified, defaults to 800 px.",
        "location": undefined,
        "memberType": undefined,
        "name": "width",
        "type": "string",
      },
    ],
    "documentation": "Enables you to include a Force.com Canvas app in a Lightning component.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "force:canvasApp",
    "namespace": "force",
    "properties": undefined,
    "type": 0,
  },
  "force:hasRecordId" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The record Id",
        "location": undefined,
        "memberType": undefined,
        "name": "recordId",
        "type": "string",
      },
    ],
    "documentation": "This interface is used to indicate that a component takes a record (SObject) as an attribute.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "force:hasRecordId",
    "namespace": "force",
    "properties": undefined,
    "type": 0,
  },
  "force:hasSObjectName" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "sObject name",
        "location": undefined,
        "memberType": undefined,
        "name": "sObjectName",
        "type": "string",
      },
    ],
    "documentation": "This interface is used to indicate that a component has SObject name attribute",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "force:hasSObjectName",
    "namespace": "force",
    "properties": undefined,
    "type": 0,
  },
  "force:inputField" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS style used to display the field.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "For internal use only. Displays error messages for the field.",
        "location": undefined,
        "memberType": undefined,
        "name": "errorComponent",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether this field is required or not.",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Data value of Salesforce field to which to bind.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "object",
      },
    ],
    "documentation": "A component that provides a concrete type-specific input component implementation based on the data to which it is bound.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "force:inputField",
    "namespace": "force",
    "properties": undefined,
    "type": 0,
  },
  "force:lightningQuickAction" => TagInfo {
    "attributes": Array [],
    "documentation": null,
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "force:lightningQuickAction",
    "namespace": "force",
    "properties": undefined,
    "type": 0,
  },
  "force:lightningQuickActionWithoutHeader" => TagInfo {
    "attributes": Array [],
    "documentation": null,
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "force:lightningQuickActionWithoutHeader",
    "namespace": "force",
    "properties": undefined,
    "type": 0,
  },
  "force:outputField" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Data value of Salesforce field to which to bind.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "object",
      },
    ],
    "documentation": "A component that provides a concrete type-specific output component implementation based on the data to which it is bound.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "force:outputField",
    "namespace": "force",
    "properties": undefined,
    "type": 0,
  },
  "force:recordData" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies which of the record's fields to query.",
        "location": undefined,
        "memberType": undefined,
        "name": "fields",
        "type": "string[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Name of the layout to query, which determines the fields included. Valid values are FULL or COMPACT. The layoutType and/or fields attribute must be specified.",
        "location": undefined,
        "memberType": undefined,
        "name": "layoutType",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The mode in which to load the record: VIEW (default) or EDIT.",
        "location": undefined,
        "memberType": undefined,
        "name": "mode",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The record Id",
        "location": undefined,
        "memberType": undefined,
        "name": "recordId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Will be set to the localized error message if the record can't be provided.",
        "location": undefined,
        "memberType": undefined,
        "name": "targetError",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A simplified view of the fields in targetRecord, to reference record fields in component markup.",
        "location": undefined,
        "memberType": undefined,
        "name": "targetFields",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The provided record. This attribute will contain only the fields relevant to the requested layoutType and/or fields atributes.",
        "location": undefined,
        "memberType": undefined,
        "name": "targetRecord",
        "type": "object",
      },
    ],
    "documentation": "Provides the ability to create, read, update, and delete Salesforce records in Lightning.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "force:recordData",
    "namespace": "force",
    "properties": undefined,
    "type": 0,
  },
  "force:recordEdit" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Id of the record to load.",
        "location": undefined,
        "memberType": undefined,
        "name": "recordId",
        "type": "string",
      },
    ],
    "documentation": "Generates an editable view of the specified Salesforce record.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "force:recordEdit",
    "namespace": "force",
    "properties": undefined,
    "type": 0,
  },
  "force:recordView" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The record (SObject) to load, optional if recordId attribute is specified.",
        "location": undefined,
        "memberType": undefined,
        "name": "record",
        "type": "sobject",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Id of the record to load, optional if record attribute is specified.",
        "location": undefined,
        "memberType": undefined,
        "name": "recordId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The type of layout to use to display the record. The default is FULL, and is the only valid type.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
    ],
    "documentation": "Generates a view of the specified Salesforce record.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "force:recordView",
    "namespace": "force",
    "properties": undefined,
    "type": 0,
  },
  "forceChatter:feed" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Valid values include DEFAULT ( shows inline comments on desktop, a bit more detail ) or BROWSE ( primarily an overview of the feed items )",
        "location": undefined,
        "memberType": undefined,
        "name": "feedDesign",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "For most feeds tied to an entity, this is used specified the desired entity. Defaults to the current user if not specified",
        "location": undefined,
        "memberType": undefined,
        "name": "subjectId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The strategy used to find items associated with the subject. Valid values include: Bookmarks, Company, DirectMessages, Feeds, Files, Filter, Groups, Home, Moderation, Mute, News, PendingReview, Record, Streams, To, Topics, UserProfile.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
    ],
    "documentation": "Represents a Chatter Feed",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "forceChatter:feed",
    "namespace": "forceChatter",
    "properties": undefined,
    "type": 0,
  },
  "forceChatter:fullFeed" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Should this component handle navigation events for entities and urls. If true then navigation events will result in the entity or url being opened in a new window.",
        "location": undefined,
        "memberType": undefined,
        "name": "handleNavigationEvents",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "For most feeds tied to an entity, this is used specified the desired entity. Defaults to the current user if not specified",
        "location": undefined,
        "memberType": undefined,
        "name": "subjectId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The strategy used to find items associated with the subject. Valid values include: News, Home, Record, To.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
    ],
    "documentation": null,
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "forceChatter:fullFeed",
    "namespace": "forceChatter",
    "properties": undefined,
    "type": 0,
  },
  "forceChatter:publisher" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The context in which the component is being displayed (RECORD or GLOBAL). RECORD is for a record feed, and GLOBAL is for all other feed types. This attribute is case-sensitive.",
        "location": undefined,
        "memberType": undefined,
        "name": "context",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The record Id",
        "location": undefined,
        "memberType": undefined,
        "name": "recordId",
        "type": "string",
      },
    ],
    "documentation": "Lets users create posts on records or groups and upload attachments from their desktops in Lightning Experience and communities and from their mobile devices in communities. Note that this component is not available to mobile devices in Lightning Experience.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "forceChatter:publisher",
    "namespace": "forceChatter",
    "properties": undefined,
    "type": 0,
  },
  "forceCommunity:appLauncher" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "Displays the App Launcher in Lightning communities to make it easy for members to move between their communities and their Salesforce org.      Add this component to any custom Lightning component in communities.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "forceCommunity:appLauncher",
    "namespace": "forceCommunity",
    "properties": undefined,
    "type": 0,
  },
  "forceCommunity:availableForAllPageTypes" => TagInfo {
    "attributes": Array [],
    "documentation": "Enables a component for drag and drop in the Lightning Components panel in Experience Builder.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "forceCommunity:availableForAllPageTypes",
    "namespace": "forceCommunity",
    "properties": undefined,
    "type": 0,
  },
  "forceCommunity:layout" => TagInfo {
    "attributes": Array [],
    "documentation": "Enables a component to be used as a custom layout for creating pages in the Experience Builder",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "forceCommunity:layout",
    "namespace": "forceCommunity",
    "properties": undefined,
    "type": 0,
  },
  "forceCommunity:navigationMenuBase" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Automatically populated with menu item’s data. This attribute is read-only.",
        "location": undefined,
        "memberType": undefined,
        "name": "menuItems",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The NavigationLinkSet this component renders. If left blank, the default link set is used. This could be ID or Developer Name.",
        "location": undefined,
        "memberType": undefined,
        "name": "navigationLinkSetId",
        "type": "string",
      },
    ],
    "documentation": "An abstract component for customizing the navigation menu in a community, which loads menu data and handles navigation. The menu’s look and feel is controlled by the component that's extending it.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "forceCommunity:navigationMenuBase",
    "namespace": "forceCommunity",
    "properties": undefined,
    "type": 0,
  },
  "forceCommunity:notifications" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "Notifications lets your members receive notifications wherever they are working, whether in their communities or in their apps. Members receive notifications on any screen—mobile, tablet, and desktop. All events that trigger notifications (@mentions and group posts) are supported. When a member clicks a notification, the originating detail page or other appropriate location is displayed for seamless collaboration across communities and apps.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "forceCommunity:notifications",
    "namespace": "forceCommunity",
    "properties": undefined,
    "type": 0,
  },
  "forceCommunity:profileMenuInterface" => TagInfo {
    "attributes": Array [],
    "documentation": "Enables a component to be used as a custom profile menu in Experience Builder.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "forceCommunity:profileMenuInterface",
    "namespace": "forceCommunity",
    "properties": undefined,
    "type": 0,
  },
  "forceCommunity:routeLink" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the anchor tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The ID of the anchor tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "id",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed in the link.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Action to trigger when the anchor is clicked.",
        "location": undefined,
        "memberType": undefined,
        "name": "onClick",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The map of dynamic parameters that create the link. Only recordId-based routes are supported.",
        "location": undefined,
        "memberType": undefined,
        "name": "routeInput",
        "type": "map",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text to display for the link tooltip.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Sets an HTML anchor tag with an href attribute that’s automatically generated from the provided record ID. Use it to improve SEO link equity in template-based communities.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "forceCommunity:routeLink",
    "namespace": "forceCommunity",
    "properties": undefined,
    "type": 0,
  },
  "forceCommunity:searchInterface" => TagInfo {
    "attributes": Array [],
    "documentation": "Enables a components to be used as a custom search component in the Experience Builder.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "forceCommunity:searchInterface",
    "namespace": "forceCommunity",
    "properties": undefined,
    "type": 0,
  },
  "forceCommunity:themeLayout" => TagInfo {
    "attributes": Array [],
    "documentation": "Represent the layout for a theme and hosted inside the Experience Builder",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "forceCommunity:themeLayout",
    "namespace": "forceCommunity",
    "properties": undefined,
    "type": 0,
  },
  "forceCommunity:waveDashboard" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A valid access token obtained by logging into Salesforce. Useful when the component is used by Lightning Out in a non-Salesforce domain.",
        "location": undefined,
        "memberType": undefined,
        "name": "accessToken",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The unique ID of the dashboard. You can get a dashboard’s ID, an 18-character code beginning with 0FK, from the dashboard's URL, or you can request it through the API. This attribute can be used instead of the developer name, but it can't be included if the name has been set. One of the two is required.",
        "location": undefined,
        "memberType": undefined,
        "name": "dashboardId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The unique developer name of the dashboard. You can request the developer name through the API. This attribute can be used instead of the dashboard ID, but it can't be included if the ID has been set. One of the two is required.",
        "location": undefined,
        "memberType": undefined,
        "name": "developerName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Adds selections or filters to the embedded dashboard at runtime. The filter attribute is configured using JSON. For filtering by dimension, use this syntax: {'datasets' : {'dataset1': [ {'fields': ['field1'], 'selection': ['$value1', '$value2']}, {'fields': ['field2'], 'filter': { 'operator': 'operator1', 'values': ['$value3', '$value4']}}]}}. For filtering on measures, use this syntax: {'datasets' : {'dataset1': [ {'fields': ['field1'], 'selection': ['$value1', '$value2']}, {'fields': ['field2'], 'filter': { 'operator': 'operator1', 'values': [[$value3]]}}]}}. With the selection option, the dashboard is shown with all its data, and the specified dimension values are highlighted. With the filter option, the dashboard is shown with only filtered data. For more information, see https://help.salesforce.com/articleView?id=bi_embed_community_builder.htm. ",
        "location": undefined,
        "memberType": undefined,
        "name": "filter",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the height of the dashboard, in pixels.",
        "location": undefined,
        "memberType": undefined,
        "name": "height",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Controls whether or not users see a dashboard that has an error. When this attribute is set to true, if the dashboard has an error, it won’t appear on the page. When set to false, the dashboard appears but doesn’t show any data. An error can occur when a user doesn't have access to the dashboard or it has been deleted. ",
        "location": undefined,
        "memberType": undefined,
        "name": "hideOnError",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If false, links to other dashboards will be opened in the same window.",
        "location": undefined,
        "memberType": undefined,
        "name": "openLinksInNewWindow",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Id of the current entity in the context of which the component is being displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "recordId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether or not the component is rendered on the page.",
        "location": undefined,
        "memberType": undefined,
        "name": "rendered",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If true, the dashboard is displayed with a header bar that includes dashboard information and controls. If false, the dashboard appears without a header bar. Note that the header bar automatically appears when either showSharing or showTitle is true.",
        "location": undefined,
        "memberType": undefined,
        "name": "showHeader",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If true, and the dashboard is shareable, then the dashboard shows the Share icon. If false, the dashboard doesn't show the Share icon. To show the Share icon in the dashboard, the smallest supported frame size is 800 x 612 pixels.",
        "location": undefined,
        "memberType": undefined,
        "name": "showSharing",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If true, the dashboard’s title is included above the dashboard. If false, the dashboard appears without a title.",
        "location": undefined,
        "memberType": undefined,
        "name": "showTitle",
        "type": "boolean",
      },
    ],
    "documentation": "Use this component to add a Salesforce Analytics dashboard to a Community page.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "forceCommunity:waveDashboard",
    "namespace": "forceCommunity",
    "properties": undefined,
    "type": 0,
  },
  "lightning:accordion" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Expands the specified accordion sections. Section names are case-sensitive. The first section in the accordion is expanded by default. To support multiple active sections, set allowMultipleSectionsOpen to true.",
        "location": undefined,
        "memberType": undefined,
        "name": "activeSectionName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If true, all sections will be closed by default and the accordion will allow multiple sections open at a time.",
        "location": undefined,
        "memberType": undefined,
        "name": "allowMultipleSectionsOpen",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Action fired when the open sections change, it contains all open sections.",
        "location": undefined,
        "memberType": undefined,
        "name": "onsectiontoggle",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "A collection of vertically stacked sections with multiple content areas. This component requires version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:accordion",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:accordionSection" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Enables a custom menu implementation. Actions are displayed to the right of the section title.",
        "location": undefined,
        "memberType": undefined,
        "name": "actions",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text that displays as the title of the section.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The unique section name to use with the activeSectionName attribute in the lightning:accordion component.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "A single section that is nested in a lightning:accordion component. This component requires version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:accordionSection",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:actionOverride" => TagInfo {
    "attributes": Array [],
    "documentation": "Enables a component to be used as an override for a standard action. You can override the View, New, Edit, and Tab standard actions on most standard and all custom components. This interface has no effect except when used within Lightning Experience and Salesforce1.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:actionOverride",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:appHomeTemplate" => TagInfo {
    "attributes": Array [],
    "documentation": "Indicates the component can be used as a flexipage page template for the APP_PAGE page type",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:appHomeTemplate",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:availableForChatterExtensionComposer" => TagInfo {
    "attributes": Array [],
    "documentation": "Enables a component to be used as a chatter extension composer",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:availableForChatterExtensionComposer",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:availableForChatterExtensionRenderer" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Payload preserved for this extension that is associated with this feed item.",
        "location": undefined,
        "memberType": undefined,
        "name": "payload",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes based on where the extension is rendered. Valid values are FEED and PREVIEW. The value defaults to FEED",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Enables a component to be used as a Chatter Extension Renderer",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:availableForChatterExtensionRenderer",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:availableForFlowActions" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Maximum time (in seconds) an asynchronous call can take before returning control to the flow and executing the Local Action element's fault connector. The default value is 120. If the value is 0 or a negative number, the call never times out.",
        "location": undefined,
        "memberType": undefined,
        "name": "timeout",
        "type": "integer",
      },
    ],
    "documentation": "Enables a component's controller to be used as an action in a flow.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:availableForFlowActions",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:availableForFlowScreens" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The navigation actions available for this screen. Valid actions are NEXT, PREVIOUS, FINISH, and PAUSE.",
        "location": undefined,
        "memberType": undefined,
        "name": "availableActions",
        "type": "string[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Reference the appropriate navigation action to move away from this screen.",
        "location": undefined,
        "memberType": undefined,
        "name": "navigateFlow",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Help text for this screen.",
        "location": undefined,
        "memberType": undefined,
        "name": "screenHelpText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Custom validation to run when the flow is navigated to the next screen. Pass a function into this attribute that evaluates the component and returns values for isValid and errorMessage.",
        "location": undefined,
        "memberType": undefined,
        "name": "validate",
        "type": "action",
      },
    ],
    "documentation": "To make a component available for flow screens, implement the lightning:availableForFlowScreens interface.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:availableForFlowScreens",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:avatar" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The alternative text used to describe the avatar, which is displayed as hover text on the image.",
        "location": undefined,
        "memberType": undefined,
        "name": "alternativeText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Lightning Design System name of the icon used as a fallback when the image fails to load. The initials fallback relies on this for its background color. Names are written in the format 'standard:account' where 'standard' is the category, and 'account' is the specific icon to be displayed. Only icons from the standard and custom categories are allowed.",
        "location": undefined,
        "memberType": undefined,
        "name": "fallbackIconName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If the record name contains two words, like first and last name, use the first capitalized letter of each. For records that only have a single word name, use the first two letters of that word using one capital and one lower case letter.",
        "location": undefined,
        "memberType": undefined,
        "name": "initials",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The size of the avatar. Valid values are x-small, small, medium, and large. This value defaults to medium.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The URL for the image.",
        "location": undefined,
        "memberType": undefined,
        "name": "src",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the shape of the avatar. Valid values are empty, circle, and square. This value defaults to square.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "A visual representation of an object.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:avatar",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:backgroundUtilityItem" => TagInfo {
    "attributes": Array [],
    "documentation": "This interface is used to indicate that the component is available to be instantiated at the app level without rendering any UI.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:backgroundUtilityItem",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:badge" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text to be displayed inside the badge.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Represents a label which holds a small amount of information, such as the number of unread notifications.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:badge",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:breadcrumb" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The URL of the page that the breadcrumb goes to.",
        "location": undefined,
        "memberType": undefined,
        "name": "href",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text label for the breadcrumb.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name for the breadcrumb component. This value is optional and can be used to identify the breadcrumb in a callback.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the breadcrumb is clicked.",
        "location": undefined,
        "memberType": undefined,
        "name": "onclick",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "An item in the hierarchy path of the page the user is on.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:breadcrumb",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:breadcrumbs" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "A hierarchy path of the page you're currently visiting within the website or app.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:breadcrumbs",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:button" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates whether assistive technologies will present all, or only parts of, the changed region. Valid values are 'true' or 'false'.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaAtomic",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A space-separated list of element IDs that this button controls the contents or presence of.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaControls",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A space-separated list of element IDs that provides descriptive labels for the button.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaDescribedBy",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates whether an element the button controls is expanded or collapsed. Valid values are 'true' or 'false'.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaExpanded",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Label describing the button to assistive technologies.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates that the button will be updated. Valid values are 'assertive', 'polite', or 'off'.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaLive",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Describes the position of the icon with respect to body. Options include left and right. This value defaults to left.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconPosition",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text to be displayed inside the button.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name for the button element. This value is optional and can be used to identify the button in a callback.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the button is clicked.",
        "location": undefined,
        "memberType": undefined,
        "name": "onclick",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the type of button. Valid values are button, reset, and submit. This value defaults to button.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value for the button element. This value is optional and can be used when submitting a form.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of the button. Accepted variants include base, neutral, brand, brand-outline, destructive, destructive-text, inverse, and success. This value defaults to neutral.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Represents a button element.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:button",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:buttonGroup" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Represents a group of buttons.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:buttonGroup",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:buttonIcon" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The alternative text used to describe the icon. This text should describe what happens when you click the button, for example 'Upload File', not what the icon looks like, 'Paperclip'.",
        "location": undefined,
        "memberType": undefined,
        "name": "alternativeText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates whether assistive technologies will present all, or only parts of, the changed region. Valid values are 'true' or 'false'.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaAtomic",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A space-separated list of element IDs that this button controls the contents or presence of.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaControls",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A space-separated list of element IDs that provides descriptive labels for the button.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaDescribedBy",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates whether an element the button controls is expanded or collapsed. Valid values are 'true' or 'false'.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaExpanded",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Label describing the button to assistive technologies.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates that the button will be updated. Valid values are 'assertive', 'polite', or 'off'.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaLive",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The class to be applied to the contained icon element.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed. Only utility icons can be used in this component.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name for the button element. This value is optional and can be used to identify the button in a callback.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action that will be run when the button is clicked.",
        "location": undefined,
        "memberType": undefined,
        "name": "onclick",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The size of the buttonIcon. For the bare variant, options include x-small, small, medium, and large. For non-bare variants, options include xx-small, x-small, small, and medium. This value defaults to medium.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text to display when the user mouses over or focuses on the button. The tooltip is auto-positioned relative to the button and screen space.",
        "location": undefined,
        "memberType": undefined,
        "name": "tooltip",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the type of button. Valid values are button, reset, and submit. This value defaults to button.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value for the button element. This value is optional and can be used when submitting a form.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of buttonIcon. Accepted variants include bare,         container, brand, border, border-filled, bare-inverse, and border-inverse. This value defaults to border.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "An icon-only HTML button.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:buttonIcon",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:buttonIconStateful" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The alternative text used to describe the icon. This text should describe what happens when you click the button, for example 'Upload File', not what the icon looks like, 'Paperclip'.",
        "location": undefined,
        "memberType": undefined,
        "name": "alternativeText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed. Note: Only utility icons can be used in this component.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name for the button element. This value is optional and can be used to identify the button in a callback.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action that will be run when the button is clicked.",
        "location": undefined,
        "memberType": undefined,
        "name": "onclick",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether button is in selected state or not",
        "location": undefined,
        "memberType": undefined,
        "name": "selected",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The size of the buttonIcon. Options include xx-small, x-small, small, and medium. This value defaults to medium.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value for the button element. This value is optional and can be used when submitting a form.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of buttonIcon. Accepted variants include border, border-filled, and border-inverse. This value defaults to border.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "An icon-only button that retains state. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:buttonIconStateful",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:buttonMenu" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The assistive text for the button.",
        "location": undefined,
        "memberType": undefined,
        "name": "alternativeText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "componentdefref[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If true, the menu is disabled. Disabling the menu prevents users from opening it. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Describes the reason for showing the draft indicator. This is required when the isDraft attribute is true.",
        "location": undefined,
        "memberType": undefined,
        "name": "draftAlternativeText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of the icon to be used in the format utility:down. This value defaults to utility:down. If an icon other than utility:down or utility:chevrondown is used, a utility:down icon is appended to the right of that icon.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The size of the icon. Options include xx-small, x-small, medium, or large. This value defaults to medium.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconSize",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If true, the menu trigger shows a draft indicator. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "isDraft",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If true, the menu is in a loading state and shows a spinner. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "isLoading",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Optional text to be shown on the button.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Message displayed while the menu is in the loading state.",
        "location": undefined,
        "memberType": undefined,
        "name": "loadingStateAlternativeText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Determines the alignment of the menu relative to the button. Available options are: auto, left, center, right, bottom-left, bottom-center, bottom-right. The auto option aligns the dropdown menu based on available space. This value defaults to left.",
        "location": undefined,
        "memberType": undefined,
        "name": "menuAlignment",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name for the button element. This value is optional and can be used to identify the button in a callback.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Action fired when the menu is opened.",
        "location": undefined,
        "memberType": undefined,
        "name": "onopen",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Action fired when a menu item is selected. The 'detail.menuItem' property of the passed event is the selected menu item.",
        "location": undefined,
        "memberType": undefined,
        "name": "onselect",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text to display when the user mouses over or focuses on the button. The tooltip is auto-positioned relative to the button and screen space.",
        "location": undefined,
        "memberType": undefined,
        "name": "tooltip",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value for the button element. This value is optional and can be used when submitting a form.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the look of the button. Accepted variants include bare, container, border, border-filled, bare-inverse, and border-inverse. This value defaults to border.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If true, the menu items are displayed. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "visible",
        "type": "boolean",
      },
    ],
    "documentation": "Represents a dropdown menu with a list of actions or functions.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:buttonMenu",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:buttonStateful" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of the icon to be used in the format \\\\'utility:close\\\\' when the state is true and the button receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconNameWhenHover",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of the icon to be used in the format \\\\'utility:add\\\\' when the state is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconNameWhenOff",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of the icon to be used in the format \\\\'utility:check\\\\' when the state is true.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconNameWhenOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text to be displayed inside the button when state is true and the button receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "labelWhenHover",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text to be displayed inside the button when state is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "labelWhenOff",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text to be displayed inside the button when state is true.",
        "location": undefined,
        "memberType": undefined,
        "name": "labelWhenOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the button is clicked.",
        "location": undefined,
        "memberType": undefined,
        "name": "onclick",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The state of the button, which shows whether the button has been selected or not. The default state is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "state",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of the button. Accepted variants include brand, destructive, inverse, neutral, success, and text. This value defaults to neutral.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "A button that toggles between states.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:buttonStateful",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:card" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Actions are components such as button or buttonIcon. Actions are displayed in the header.",
        "location": undefined,
        "memberType": undefined,
        "name": "actions",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The footer can include text or another component",
        "location": undefined,
        "memberType": undefined,
        "name": "footer",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed. The icon is displayed in the header to the left of the title.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The title can include text or another component, and is displayed in the header.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of the card. Accepted variants include base or narrow. This value defaults to base.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Cards are used to apply a container around a related grouping of information.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:card",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:carousel" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the carousel should stop looping from the beginning after the last item is displayed. The default value is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disableAutoRefresh",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether auto scroll is disabled. The default value is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disableAutoScroll",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The auto scroll duration. The default is 5 seconds, after that the next image is displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "scrollDuration",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "A collection of images that are displayed one at a time.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:carousel",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:checkboxGroup" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Set to true if the checkbox group is disabled. Checkbox selections can't be changed for a disabled checkbox group. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text label for the checkbox group.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Optional message displayed when no checkbox is selected and the required attribute is set to true.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenValueMissing",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of the checkbox group.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the checkbox group releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a checkbox value changes.",
        "location": undefined,
        "memberType": undefined,
        "name": "onchange",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the checkbox group receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Array of label-value pairs for each checkbox.",
        "location": undefined,
        "memberType": undefined,
        "name": "options",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Set to true if at least one checkbox must be selected. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of selected checkboxes. Each array entry contains the value of a selected checkbox. The value of each checkbox is set in the options attribute.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of the checkbox group. Accepted variants include standard, label-hidden, label-inline, and label-stacked. This value defaults to standard. Use label-hidden to hide the label but make it available to assistive technology. Use label-inline to horizontally align the label and checkbox group. Use label-stacked to place the label above the checkbox group.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "A checkbox group that enables selection of single or multiple options. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:checkboxGroup",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:clickToDial" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Comma-separated list of parameters to pass to the third-party phone system.",
        "location": undefined,
        "memberType": undefined,
        "name": "params",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Salesforce record Id that's associated with the phone number.",
        "location": undefined,
        "memberType": undefined,
        "name": "recordId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The phone number.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Renders a formatted phone number as click-to-dial enabled or disabled for Open CTI and Voice. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:clickToDial",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:combobox" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input element should be disabled. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies where the drop-down list is aligned with or anchored to the selection field. By default the list is aligned with the selection field at the top so the list opens down.  Use bottom-left to make the selection field display at the bottom so the list opens above it.  Use auto to let the component determine where to open the list based on space available.",
        "location": undefined,
        "memberType": undefined,
        "name": "dropdownAlignment",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Help text detailing the purpose and function of the combobox.",
        "location": undefined,
        "memberType": undefined,
        "name": "fieldLevelHelp",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text label for the combobox.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when the value is missing and input is required.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenValueMissing",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the name of an input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a value attribute changes.",
        "location": undefined,
        "memberType": undefined,
        "name": "onchange",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A list of options that are available for selection. Each option has the following attributes: label and value.",
        "location": undefined,
        "memberType": undefined,
        "name": "options",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text that is displayed before an option is selected, to prompt the user to select an option. The default is \\"Select an Option\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "placeholder",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input field is read-only. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "readonly",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input field must be filled out before submitting the form. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays a spinner to indicate activity in the dropdown list. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "spinnerActive",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Represents the validity states that an element can be in, with respect to constraint validation.",
        "location": undefined,
        "memberType": undefined,
        "name": "validity",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the value of an input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of an input field. Accepted variants include standard, label-inline, label-hidden, and label-stacked. This value defaults to standard, which displays the label above the field. Use label-hidden to hide the label but make it available to assistive technology. Use label-inline to horizontally align the label and input field. Use label-stacked to place the label above the input field.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "A widget that provides an input field that is readonly, accompanied with a dropdown list of selectable options.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:combobox",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:container" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Used for alternative text in accessibility scenarios.",
        "location": undefined,
        "memberType": undefined,
        "name": "alternativeText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class for the iframe element.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The client-side controller action to run when an error occurs when sending a message to the contained app.",
        "location": undefined,
        "memberType": undefined,
        "name": "onerror",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The client-side controller action to run when a message is received from the contained content.",
        "location": undefined,
        "memberType": undefined,
        "name": "onmessage",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The resource name, landing page and query params in url format. Navigation is supported only for the single page identified.",
        "location": undefined,
        "memberType": undefined,
        "name": "src",
        "type": "string",
      },
    ],
    "documentation": "Used to contain content that uses a third-party javascript framework such as Angular or React.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:container",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:conversationToolkitAPI" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "Console integration APIs for Live Agent.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:conversationToolkitAPI",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:datatable" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Array of the columns object that's used to define the data types. Required properties include 'label', 'dataKey', and 'type'. The default type is 'text'.",
        "location": undefined,
        "memberType": undefined,
        "name": "columns",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The array of data to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "data",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the default sorting direction on an unsorted column. Valid options include 'asc' and 'desc'. The default is 'asc' for sorting in ascending order.",
        "location": undefined,
        "memberType": undefined,
        "name": "defaultSortDirection",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The current values per row that are provided during inline edit.",
        "location": undefined,
        "memberType": undefined,
        "name": "draftValues",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Enables or disables infinite loading. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "enableInfiniteLoading",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies an object containing information about cell level, row level, and table level errors. When it's set, error messages are displayed on the table accordingly.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Hides or displays the checkbox column for row selection. To hide the checkbox column, set hideCheckboxColumn to true. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "hideCheckboxColumn",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the table header should be hidden.",
        "location": undefined,
        "memberType": undefined,
        "name": "hideTableHeader",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether more data is being loaded and displays a spinner if so. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "isLoading",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Required for better performance. Associates each row with a unique ID.",
        "location": undefined,
        "memberType": undefined,
        "name": "keyField",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Determines when to trigger infinite loading based on how many pixels the table's scroll position is from the bottom of the table. The default is 20.",
        "location": undefined,
        "memberType": undefined,
        "name": "loadMoreOffset",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum width for all columns. The default is 1000px.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxColumnWidth",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum number of rows that can be selected. Checkboxes are used for selection by default, and radio buttons are used when maxRowSelection is 1.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxRowSelection",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The minimum width for all columns. The default is 50px.",
        "location": undefined,
        "memberType": undefined,
        "name": "minColumnWidth",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when you click the Cancel button during inline edit. All edited cells revert to their original values.",
        "location": undefined,
        "memberType": undefined,
        "name": "oncancel",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a cell's value changes after an inline edit. Returns the draftValues object.",
        "location": undefined,
        "memberType": undefined,
        "name": "oncellchange",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a header action is clicked. By default, it also closes the header actions menu. Returns the action and columnDefinition objects.",
        "location": undefined,
        "memberType": undefined,
        "name": "onheaderaction",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when infinite loading loads more data.",
        "location": undefined,
        "memberType": undefined,
        "name": "onloadmore",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the table renders columns the first time, and whenever a column is resized. Returns columnWidths and isUserTriggered.",
        "location": undefined,
        "memberType": undefined,
        "name": "onresize",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a row action is clicked. By default, it also closes the row actions menu. Returns the eventDetails object.",
        "location": undefined,
        "memberType": undefined,
        "name": "onrowaction",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a row is selected. Returns the selectedRows object.",
        "location": undefined,
        "memberType": undefined,
        "name": "onrowselection",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when you click the Save button during inline edit. Returns the draftValues object.",
        "location": undefined,
        "memberType": undefined,
        "name": "onsave",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a column is sorted. Returns fieldName and sortDirection.",
        "location": undefined,
        "memberType": undefined,
        "name": "onsort",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether column resizing is disabled. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "resizeColumnDisabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The width to resize the column when user press left or right arrow. The default is 10px.",
        "location": undefined,
        "memberType": undefined,
        "name": "resizeStep",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Determines where to start counting the row number. The default is 0.",
        "location": undefined,
        "memberType": undefined,
        "name": "rowNumberOffset",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Enables programmatic row selection with a list of keyField values.",
        "location": undefined,
        "memberType": undefined,
        "name": "selectedRows",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Shows or hides the row number column. Set to true to show the row number column. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "showRowNumberColumn",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The column fieldName that controls the sorting order. Sort the data using the onsort event handler.",
        "location": undefined,
        "memberType": undefined,
        "name": "sortedBy",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the sorting direction. Sort the data using the onsort event handler. Valid options include 'asc' and 'desc'.",
        "location": undefined,
        "memberType": undefined,
        "name": "sortedDirection",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the inline edit Save/Cancel bottom bar should be hidden.",
        "location": undefined,
        "memberType": undefined,
        "name": "suppressBottomBar",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "This value specifies the number of lines after which the content will be cut off and hidden. It must be at least 1 or more. The text in the last line is truncated and shown with an ellipsis.",
        "location": undefined,
        "memberType": undefined,
        "name": "wrapTextMaxLines",
        "type": "integer",
      },
    ],
    "documentation": "A table that displays columns of data, formatted according to type. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:datatable",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:dualListbox" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Label for add button.",
        "location": undefined,
        "memberType": undefined,
        "name": "addButtonLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input element should be disabled. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Set to true to hide the Up and Down buttons used for reordering the Selected list items.",
        "location": undefined,
        "memberType": undefined,
        "name": "disableReordering",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Label for down button.",
        "location": undefined,
        "memberType": undefined,
        "name": "downButtonLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Help text detailing the purpose and function of the dual listbox.",
        "location": undefined,
        "memberType": undefined,
        "name": "fieldLevelHelp",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Label for the dual listbox.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Maximum number of options required in the selected options listbox.",
        "location": undefined,
        "memberType": undefined,
        "name": "max",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a range overflow is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenRangeOverflow",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a range underflow is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenRangeUnderflow",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when the value is missing and input is required.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenValueMissing",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Minimum number of options required in the selected options listbox.",
        "location": undefined,
        "memberType": undefined,
        "name": "min",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the name of an input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a value attribute changes.",
        "location": undefined,
        "memberType": undefined,
        "name": "onchange",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A list of options that are available for selection. Each option has the following attributes: label and value.",
        "location": undefined,
        "memberType": undefined,
        "name": "options",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input field is read-only. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "readonly",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Label for remove button.",
        "location": undefined,
        "memberType": undefined,
        "name": "removeButtonLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input field must be filled out before submitting the form. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A list of required options that cannot be removed from selected options listbox. This list is populated with values from options attribute.",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredOptions",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Label for selected options listbox.",
        "location": undefined,
        "memberType": undefined,
        "name": "selectedLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays a spinner to indicate activity in the listbox. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "showActivityIndicator",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Number of items that display before vertical scrollbars are displayed for the listboxes. Determines the vertical size of the dual listbox.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Label for source options listbox.",
        "location": undefined,
        "memberType": undefined,
        "name": "sourceLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Label for up button.",
        "location": undefined,
        "memberType": undefined,
        "name": "upButtonLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Represents the validity states that an element can be in, with respect to constraint validation.",
        "location": undefined,
        "memberType": undefined,
        "name": "validity",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the value of an input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A list of default options that are included in the selected options listbox. This list is populated with values from the options attribute.",
        "location": undefined,
        "memberType": undefined,
        "name": "values",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of the dual listbox. Accepted variants include standard, label-inline, label-hidden, and label-stacked. This value defaults to standard. Use label-hidden to hide the label but make it available to assistive technology. Use label-inline to horizontally align the label and dual listbox. Use label-stacked to place the label above the dual listbox.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "A widget that provides an input listbox, accompanied with a listbox of selectable options. Order of selected options is saved. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:dualListbox",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:dynamicIcon" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The alternative text used to describe the dynamicIcon. This text should describe what’s happening. For example, 'Graph is refreshing', not what the icon looks like, 'Graph'.",
        "location": undefined,
        "memberType": undefined,
        "name": "alternativeText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the icon is clicked.",
        "location": undefined,
        "memberType": undefined,
        "name": "onclick",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The option attribute changes the appearance of the dynamicIcon. The options available depend on the type attribute.                 For eq: play (default) or stop                 For score: positive (default) or negative                 For strength: -3, -2, -1, 0 (default), 1, 2, 3                 For trend: neutral (default), up, or down",
        "location": undefined,
        "memberType": undefined,
        "name": "option",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Lightning Design System name of the dynamicIcon. Valid values are: ellie, eq, score, strength, trend, and waffle.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
    ],
    "documentation": "Represents various animated icons with different states. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:dynamicIcon",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:empApi" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "Exposes the EmpJs Streaming API library which subscribes to a streaming channel and listens to event messages using a shared CometD connection. This component is supported only in desktop browsers. This component requires API version 44.0 or later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:empApi",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:fileCard" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The description of the file, by default it is set to the filename",
        "location": undefined,
        "memberType": undefined,
        "name": "description",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Salesforce File ID (ContentDocument).",
        "location": undefined,
        "memberType": undefined,
        "name": "fileId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Hides the file description in the caption if enabled",
        "location": undefined,
        "memberType": undefined,
        "name": "hideDescription",
        "type": "boolean",
      },
    ],
    "documentation": "Displays a preview of an uploaded file available in Salesforce CRM Content or Salesforce Files.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:fileCard",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:fileUpload" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Comma-separated list of file extensions that can be uploaded in the format .ext, such as .pdf, .jpg, or .png",
        "location": undefined,
        "memberType": undefined,
        "name": "accept",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether this component should be displayed in a disabled state. Disabled components can't be clicked. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text label for the file uploader.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether a user can upload more than one file simultaneously. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "multiple",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the name of the input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when files have finished uploading.",
        "location": undefined,
        "memberType": undefined,
        "name": "onuploadfinished",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The record Id of the record that the uploaded file is associated to.",
        "location": undefined,
        "memberType": undefined,
        "name": "recordId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "A file uploader for uploading and attaching files to records.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:fileUpload",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:flexipageRegionInfo" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The width of the region that the component resides in.",
        "location": undefined,
        "memberType": undefined,
        "name": "width",
        "type": "string",
      },
    ],
    "documentation": "Provides Lightning page region information to the component that contains it.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:flexipageRegionInfo",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:flow" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the interview’s status changes or a new screen is displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "onstatuschange",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Represents a flow interview in Lightning runtime. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:flow",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:formattedAddress" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The city detail for the address.",
        "location": undefined,
        "memberType": undefined,
        "name": "city",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The country detail for the address.",
        "location": undefined,
        "memberType": undefined,
        "name": "country",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the address is clickable. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The latitude of the location if known. Latitude values must be within -90 and 90.",
        "location": undefined,
        "memberType": undefined,
        "name": "latitude",
        "type": "decimal",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The longitude of the location if known. Longitude values must be within -180 and 180.",
        "location": undefined,
        "memberType": undefined,
        "name": "longitude",
        "type": "decimal",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The postal code detail for the address.",
        "location": undefined,
        "memberType": undefined,
        "name": "postalCode",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The province detail for the address.",
        "location": undefined,
        "memberType": undefined,
        "name": "province",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays a static map of the location using Google Maps. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "showStaticMap",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The street detail for the address.",
        "location": undefined,
        "memberType": undefined,
        "name": "street",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Displays a formatted address that provides a link to the given location on Google Maps. This component requires API version 42.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:formattedAddress",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:formattedDateTime" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Allowed values are numeric or 2-digit.",
        "location": undefined,
        "memberType": undefined,
        "name": "day",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Allowed values are narrow, short, or long.",
        "location": undefined,
        "memberType": undefined,
        "name": "era",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Allowed values are numeric or 2-digit.",
        "location": undefined,
        "memberType": undefined,
        "name": "hour",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Determines whether time is displayed as 12-hour. If false, time displays as 24-hour. The default setting is determined by the user's locale.",
        "location": undefined,
        "memberType": undefined,
        "name": "hour12",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Allowed values are numeric or 2-digit.",
        "location": undefined,
        "memberType": undefined,
        "name": "minute",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Allowed values are 2-digit, narrow, short, or long.",
        "location": undefined,
        "memberType": undefined,
        "name": "month",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Allowed values are numeric or 2-digit.",
        "location": undefined,
        "memberType": undefined,
        "name": "second",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The time zone to display. Use this attribute only if you want to override the default, which is the runtime environment's time zone. Specify a time zone listed in the IANA time zone database (https://www.iana.org/time-zones). For example, set the value to 'Pacific/Honolulu' to display Hawaii time. The short code UTC is also accepted.",
        "location": undefined,
        "memberType": undefined,
        "name": "timeZone",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Display style of the time zone. Allowed values are short or long. For example, the Pacific time zone displays as 'PST' if you specify 'short', or 'Pacific Standard Time' if you specify 'long.'",
        "location": undefined,
        "memberType": undefined,
        "name": "timeZoneName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value to be formatted, which can be a Date object, timestamp, or an ISO8601 formatted string.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies how to display the day of the week. Allowed values are narrow, short, or long.",
        "location": undefined,
        "memberType": undefined,
        "name": "weekday",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Allowed values are numeric or 2-digit.",
        "location": undefined,
        "memberType": undefined,
        "name": "year",
        "type": "string",
      },
    ],
    "documentation": "Displays formatted date and time.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:formattedDateTime",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:formattedEmail" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If true, hides the email icon so only the email address is displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "hideIcon",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text label for the email.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the email is clicked.",
        "location": undefined,
        "memberType": undefined,
        "name": "onclick",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The email address that's displayed if a label is not provided.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Displays an email as a hyperlink with the mailto: URL scheme. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:formattedEmail",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:formattedLocation" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The latitude value of the geolocation. Latitude values must be within -90 and 90.",
        "location": undefined,
        "memberType": undefined,
        "name": "latitude",
        "type": "decimal",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The longitude value of the geolocation. Longitude values must be within -180 and 180.",
        "location": undefined,
        "memberType": undefined,
        "name": "longitude",
        "type": "decimal",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Displays a geolocation in decimal degrees (DD) using the format [latitude, longitude]. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:formattedLocation",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:formattedName" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value for the first name.",
        "location": undefined,
        "memberType": undefined,
        "name": "firstName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The format for which to display the name. Valid values include short, medium, and long. This value defaults to long.",
        "location": undefined,
        "memberType": undefined,
        "name": "format",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value for the informal name.",
        "location": undefined,
        "memberType": undefined,
        "name": "informalName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value for the last name.",
        "location": undefined,
        "memberType": undefined,
        "name": "lastName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value for the middle name.",
        "location": undefined,
        "memberType": undefined,
        "name": "middleName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value for the salutation, such as Dr. or Mrs.",
        "location": undefined,
        "memberType": undefined,
        "name": "salutation",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value for the suffix.",
        "location": undefined,
        "memberType": undefined,
        "name": "suffix",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Displays a formatted name that can include a salutation and suffix. This component requires API version 42.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:formattedName",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:formattedNumber" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Only used if style='currency', this attribute determines which currency is displayed. Possible values are the ISO 4217 currency codes, such as 'USD' for the US dollar.",
        "location": undefined,
        "memberType": undefined,
        "name": "currencyCode",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Determines how currency is displayed. Possible values are symbol, code, and name. This value defaults to symbol.",
        "location": undefined,
        "memberType": undefined,
        "name": "currencyDisplayAs",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum number of fraction digits that are allowed.",
        "location": undefined,
        "memberType": undefined,
        "name": "maximumFractionDigits",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum number of significant digits that are allowed. Possible values are from 1 to 21.",
        "location": undefined,
        "memberType": undefined,
        "name": "maximumSignificantDigits",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The minimum number of fraction digits that are required.",
        "location": undefined,
        "memberType": undefined,
        "name": "minimumFractionDigits",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The minimum number of integer digits that are required. Possible values are from 1 to 21.",
        "location": undefined,
        "memberType": undefined,
        "name": "minimumIntegerDigits",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The minimum number of significant digits that are required. Possible values are from 1 to 21.",
        "location": undefined,
        "memberType": undefined,
        "name": "minimumSignificantDigits",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The number formatting style to use. Possible values are decimal, currency, and percent. This value defaults to decimal.",
        "location": undefined,
        "memberType": undefined,
        "name": "style",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value to be formatted.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "decimal",
      },
    ],
    "documentation": "Displays formatted numbers for decimals, currency, and percentages.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:formattedNumber",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:formattedPhone" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the phone number is clicked.",
        "location": undefined,
        "memberType": undefined,
        "name": "onclick",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Sets the phone number to display.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "integer",
      },
    ],
    "documentation": "Displays a phone number as a hyperlink with the tel: URL scheme. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:formattedPhone",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:formattedRichText" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Prevents the component from creating links in the rich text.",
        "location": undefined,
        "memberType": undefined,
        "name": "disableLinkify",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Sets the rich text to display.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Displays rich text that's formatted with whitelisted tags and attributes. Other tags and attributes are removed and only their text content is displayed. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:formattedRichText",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:formattedText" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the text should be converted to a link. If set to true, URLs and email addresses are displayed in anchor tags.",
        "location": undefined,
        "memberType": undefined,
        "name": "linkify",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text to output.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Displays text, replaces newlines with line breaks, and linkifies if requested. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:formattedText",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:formattedTime" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The time value to format.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Displays a formatted time in user's locale format. This component requires API version 42.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:formattedTime",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:formattedUrl" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text to display in the link.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies where to open the link. Options include _blank, _parent, _self, and _top. This value defaults to _self.",
        "location": undefined,
        "memberType": undefined,
        "name": "target",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text to display when the mouse hovers over the link. A link doesn't display a tooltip unless a text value is provided.",
        "location": undefined,
        "memberType": undefined,
        "name": "tooltip",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The URL to be formatted.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Displays a URL as a hyperlink. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:formattedUrl",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:hasPageReference" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "An object with a String 'type' property and Object 'attributes' and 'state' properties.",
        "location": undefined,
        "memberType": undefined,
        "name": "pageReference",
        "type": "object",
      },
    ],
    "documentation": "This interface is used to indicate that a component takes a pageReference Object as an attribute.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:hasPageReference",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:helptext" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text to be shown in the popover.",
        "location": undefined,
        "memberType": undefined,
        "name": "content",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Lightning Design System name of the icon used as the visible element. Names are written in the format 'utility:info' where 'utility' is the category, and 'info' is the specific icon to be displayed. The default value is 'utility:info'.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The iconVariant changes the appearance of the icon. Accepted variants include inverse, warning, error.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconVariant",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "An icon with a text popover.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:helptext",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:homeTemplate" => TagInfo {
    "attributes": Array [],
    "documentation": "Indicates the component can be used as a flexipage page template for the HOME_PAGE page type",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:homeTemplate",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:icon" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The alternative text used to describe the icon. This text should describe what happens when you click the button, for example 'Upload File', not what the icon looks like, 'Paperclip'.",
        "location": undefined,
        "memberType": undefined,
        "name": "alternativeText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The size of the icon. Options include xx-small, x-small, small, medium, or large. This value defaults to medium.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A uri path to a custom svg sprite, including the name of the resouce, for example: /assets/icons/standard-sprite/svg/test.svg#icon-heart",
        "location": undefined,
        "memberType": undefined,
        "name": "src",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of a utility icon. Accepted variants include inverse, success, warning, and error. Use the inverse variant to implement a white fill in utility icons on dark backgrounds.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Represents a visual element that provides context and enhances usability.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:icon",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:input" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the types of files that the server accepts. Use this attribute with file input type only.",
        "location": undefined,
        "memberType": undefined,
        "name": "accept",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A space-separated list of element IDs whose presence or content is controlled by the input.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaControls",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A space-separated list of element IDs that provide descriptive labels for the input.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaDescribedBy",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Describes the input to assistive technologies.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A space-separated list of element IDs that provide labels for the input.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaLabelledBy",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Controls auto-filling of the field. Use this attribute with email, search, tel, text, and url input types only. Set the attribute to pass through autocomplete values to be interpreted by the browser.",
        "location": undefined,
        "memberType": undefined,
        "name": "autocomplete",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the checkbox is checked. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "checked",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A space-separated list of element IDs whose presence or content is controlled by the date input when type=datetime. On mobile devices, this is merged with ariaControls and timeAriaControls to describe the native date time input.",
        "location": undefined,
        "memberType": undefined,
        "name": "dateAriaControls",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A space-separated list of element IDs that provide descriptive labels for the date input when type=datetime. On mobile devices, this is merged with ariaDescribedBy and timeAriaDescribedBy to describe the native date time input.",
        "location": undefined,
        "memberType": undefined,
        "name": "dateAriaDescribedBy",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Describes the date input to assistive technologies when type=datetime. On mobile devices, this label is merged with ariaLabel and timeAriaLabel to describe the native date time input.",
        "location": undefined,
        "memberType": undefined,
        "name": "dateAriaLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A space-separated list of element IDs that provide labels for the date input when type=datetime. On mobile devices, this is merged with ariaLabelledBy and timeAriaLabelledBy to describe the native date time input.",
        "location": undefined,
        "memberType": undefined,
        "name": "dateAriaLabelledBy",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The display style of the date when type='date' or type='datetime'. Valid values are short, medium (default), and long. The format of each style is specific to the locale. On mobile devices this attribute has no effect.",
        "location": undefined,
        "memberType": undefined,
        "name": "dateStyle",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input element should be disabled. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Help text detailing the purpose and function of the input. This attribute isn't supported for file, radio, toggle, and checkbox-button types.",
        "location": undefined,
        "memberType": undefined,
        "name": "fieldLevelHelp",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A FileList that contains selected files. Use this attribute with file input type only.",
        "location": undefined,
        "memberType": undefined,
        "name": "files",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "String value with the formatter to be used for number input. Valid values include decimal, percent, percent-fixed, and currency.",
        "location": undefined,
        "memberType": undefined,
        "name": "formatter",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "For the search type only. Specifies whether the spinner is displayed to indicate that data is loading. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "isLoading",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text label for the input.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum acceptable value for the input. Use this attribute with number, range, date, time, and datetime input types only. For number and range type, the max value is a decimal number. For the date, time, and datetime types, the max value must use a valid string for the type.",
        "location": undefined,
        "memberType": undefined,
        "name": "max",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum number of characters allowed in the field. Use this attribute with email, password, search, tel, text, and url input types only.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxlength",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text shown for the active state of a toggle. The default is \\"Active\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "messageToggleActive",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text shown for then inactive state of a toggle. The default is \\"Inactive\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "messageToggleInactive",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a bad input is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenBadInput",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a pattern mismatch is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenPatternMismatch",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a range overflow is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenRangeOverflow",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a range underflow is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenRangeUnderflow",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a step mismatch is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenStepMismatch",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when the value is too long.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenTooLong",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when the value is too short.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenTooShort",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a type mismatch is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenTypeMismatch",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when the value is missing.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenValueMissing",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The minimum acceptable value for the input. Use this attribute with number, range, date, time, and datetime input types only. For number and range types, the min value is a decimal number. For the date, time, and datetime types, the min value must use a valid string for the type.",
        "location": undefined,
        "memberType": undefined,
        "name": "min",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The minimum number of characters allowed in the field. Use this attribute with email, password, search, tel, text, and url input types only.",
        "location": undefined,
        "memberType": undefined,
        "name": "minlength",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that a user can enter more than one value. Use this attribute with file and email input types only.",
        "location": undefined,
        "memberType": undefined,
        "name": "multiple",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the name of an input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered each time the user changes the input value while maintaining focus on the input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "onchange",
        "type": "",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the user finishes changing the input value. For example, pressing Enter, navigating away from the input element, clearing a search.",
        "location": undefined,
        "memberType": undefined,
        "name": "oncommit",
        "type": "",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the regular expression that the input's value is checked against.                                 Use this attribute with email, password, search, tel, text, and url input types only.",
        "location": undefined,
        "memberType": undefined,
        "name": "pattern",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text that is displayed when the field is empty, to prompt the user for a valid entry. Use this attribute with date, email, number, password, search, tel, text, time, and url input types only. Placeholder text isn't supported in date and time input types on mobile devices.",
        "location": undefined,
        "memberType": undefined,
        "name": "placeholder",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input field is read-only. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "readonly",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input field must be filled out before submitting the form. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Granularity of the value, specified as a positive floating point number. Use this attribute with number and range input types only. Use 'any' when granularity is not a concern. This value defaults to 1.",
        "location": undefined,
        "memberType": undefined,
        "name": "step",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A space-separated list of element IDs whose presence or content is controlled by the time input when type=datetime. On mobile devices, this is merged with ariaControls and dateAriaControls to describe the native date time input.",
        "location": undefined,
        "memberType": undefined,
        "name": "timeAriaControls",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A space-separated list of element IDs that provide descriptive labels for the time input when type=datetime. On mobile devices, this is merged with ariaDescribedBy and dateAriaDescribedBy to describe the native date time input.",
        "location": undefined,
        "memberType": undefined,
        "name": "timeAriaDescribedBy",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Describes the time input to assistive technologies when type=datetime. On mobile devices, this label is merged with ariaLabel and dateAriaLabel to describe the native date time input.",
        "location": undefined,
        "memberType": undefined,
        "name": "timeAriaLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A space-separated list of element IDs that provide labels for the time input when type=datetime. On mobile devices, this is merged with ariaLabelledBy and dateAriaLabelledBy to describe the native date time input.",
        "location": undefined,
        "memberType": undefined,
        "name": "timeAriaLabelledBy",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The display style of the time when type='time' or type='datetime'. Valid values are short (default), medium, and long. Currently, medium and long styles look the same. On mobile devices this attribute has no effect.",
        "location": undefined,
        "memberType": undefined,
        "name": "timeStyle",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the time zone used when type='datetime' only. This value defaults to the user’s Salesforce time zone setting.",
        "location": undefined,
        "memberType": undefined,
        "name": "timezone",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The type of the input. This value defaults to text.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Represents the validity states that an element can be in, with respect to constraint validation.",
        "location": undefined,
        "memberType": undefined,
        "name": "validity",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the value of an input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of an input field. Accepted variants include standard, label-inline, label-hidden, and label-stacked. This value defaults to standard, which displays the label above the field. Use label-hidden to hide the label but make it available to assistive technology. Use label-inline to horizontally align the label and input field. Use label-stacked to place the label above the input field.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Represents interactive controls that accept user input depending on the type attribute.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:input",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:inputAddress" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The label of the address compound field.",
        "location": undefined,
        "memberType": undefined,
        "name": "addressLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The city field of the address.",
        "location": undefined,
        "memberType": undefined,
        "name": "city",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The label of the city field of the address.",
        "location": undefined,
        "memberType": undefined,
        "name": "cityLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The country field of the address. If countryOptions is provided, this country value is selected by default.",
        "location": undefined,
        "memberType": undefined,
        "name": "country",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The label of the country field of the address.",
        "location": undefined,
        "memberType": undefined,
        "name": "countryLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The array of label-value pairs for the country. Displays a dropdown menu of options.",
        "location": undefined,
        "memberType": undefined,
        "name": "countryOptions",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the address fields are disabled. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Help text detailing the purpose and function of the address compound field.",
        "location": undefined,
        "memberType": undefined,
        "name": "fieldLevelHelp",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the input releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the value changes.",
        "location": undefined,
        "memberType": undefined,
        "name": "onchange",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the input receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The postal code field of the address.",
        "location": undefined,
        "memberType": undefined,
        "name": "postalCode",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The label of the postal code field of the address.",
        "location": undefined,
        "memberType": undefined,
        "name": "postalCodeLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The province field of the address. If provinceOptions is provided, this province value is selected by default.",
        "location": undefined,
        "memberType": undefined,
        "name": "province",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The label of the province field of the address.",
        "location": undefined,
        "memberType": undefined,
        "name": "provinceLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The array of label-value pairs for the province. Displays a dropdown menu of options.",
        "location": undefined,
        "memberType": undefined,
        "name": "provinceOptions",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the address fields are read-only. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "readonly",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the address fields are required. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether to enable address lookup using Google Maps. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "showAddressLookup",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The street field of the address.",
        "location": undefined,
        "memberType": undefined,
        "name": "street",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The label of the street field of the address.",
        "location": undefined,
        "memberType": undefined,
        "name": "streetLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of the address compound field. Accepted variants include standard, label-inline, label-hidden, and label-stacked. This value defaults to standard. Use label-hidden to hide the label but make it available to assistive technology. Use label-inline to horizontally align the label and address fields. Use label-stacked to place the label above the address fields.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Represents an address compound field. This component requires API version 42.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:inputAddress",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:inputField" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether a field is disabled. Disabled fields are grayed out and users can't interact with them. They don't receive focus and are skipped in tabbing navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The API name of the field to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "fieldName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the input value changes.",
        "location": undefined,
        "memberType": undefined,
        "name": "onchange",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether an input field is read-only. Not supported for the following field types: rich text, picklist, multi-select picklist, and lookup. A read-only field is not disabled by default.",
        "location": undefined,
        "memberType": undefined,
        "name": "readonly",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The field value, which overrides the existing value.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the label position of an input field. Accepted variants include standard (default), label-hidden, label-inline, and label-stacked. The variant, if specified, determines the label position. Otherwise, the density setting of the parent form determines the label position.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Represents an editable input for a field on a Salesforce object. This component requires API version 42.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:inputField",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:inputLocation" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the compound field should be disabled. Disabled fields are grayed out and not clickable. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Help text detailing the purpose and function of geolocation compound field.",
        "location": undefined,
        "memberType": undefined,
        "name": "fieldLevelHelp",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text label for the geolocation compound field.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The latitude value. Latitude values must be within -90 and 90.",
        "location": undefined,
        "memberType": undefined,
        "name": "latitude",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The longitude value. Longitude values must be within -180 and 180.",
        "location": undefined,
        "memberType": undefined,
        "name": "longitude",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the input releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the value changes.",
        "location": undefined,
        "memberType": undefined,
        "name": "onchange",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the input receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the compound field is read-only. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "readonly",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the compound field must be filled out. An error message is displayed if a user interacts with the field and does not provide a value. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of the geolocation compound field. Accepted variants include standard, label-hidden, label-inline, and label-stacked. This value defaults to standard. This value defaults to standard. Use label-hidden to hide the label but make it available to assistive technology. Use label-inline to horizontally align the label and geolocation fields. Use label-stacked to place the label above the geolocation fields.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Represents a geolocation compound field that accepts a latitude and longitude value. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:inputLocation",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:inputName" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the compound field should be disabled. Disabled fields are grayed out and not clickable. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Help text detailing the purpose and function of name compound field.",
        "location": undefined,
        "memberType": undefined,
        "name": "fieldLevelHelp",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "List of fields to be displayed on the component. This value defaults to ['firstName', 'salutation', 'lastName']. Other field values include middleName, informalName, suffix.",
        "location": undefined,
        "memberType": undefined,
        "name": "fieldsToDisplay",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays the First Name field.",
        "location": undefined,
        "memberType": undefined,
        "name": "firstName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays the Informal Name field.",
        "location": undefined,
        "memberType": undefined,
        "name": "informalName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text label for the compound field.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays the Last Name field. This field must be specified if you set required to true.",
        "location": undefined,
        "memberType": undefined,
        "name": "lastName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays the Middle Name field.",
        "location": undefined,
        "memberType": undefined,
        "name": "middleName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the input releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the value changes.",
        "location": undefined,
        "memberType": undefined,
        "name": "onchange",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the input receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Defines a list of salutation options, such as Dr. or Mrs., as an array of label-value pairs.",
        "location": undefined,
        "memberType": undefined,
        "name": "options",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the compound field is read-only. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "readonly",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the compound field must be filled out. A red asterisk is displayed on the Last Name field. An error message is displayed if a user interacts with the Last Name field and does not provide a value. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays the Salutation field as a dropdown menu. Use the options attribute to provide salutations in an array of label-value pairs.",
        "location": undefined,
        "memberType": undefined,
        "name": "salutation",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays the Suffix field.",
        "location": undefined,
        "memberType": undefined,
        "name": "suffix",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of the name compound field. Accepted variants include standard, label-hidden, label-inline, and label-stacked. This value defaults to standard. Use label-hidden to hide the label but make it available to assistive technology. Use label-inline to horizontally align the label and name fields. Use label-stacked to place the label above the name fields.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Represents a name compound field. This component requires API version 42.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:inputName",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:inputRichText" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A space-separated list of element IDs that provides descriptive labels for the rich text editor.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaDescribedby",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Label describing the rich text editor to assistive technologies",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "An element ID that provides a label for the rich text editor.",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaLabelledby",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the editor is disabled. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A comma-separated list of button categories to remove from the toolbar.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabledCategories",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A list of formats accepted by the text editor. By default, the list is computed based on enabled categories. The \\"table\\" format is always enabled to support copying and pasting of tables. If formats are specified, all desired formats must be specified. Omitting a format from the list removes the corresponding button.",
        "location": undefined,
        "memberType": undefined,
        "name": "formats",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text label for the rich text editor.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the label is visible or not. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "labelVisible",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message that's displayed when valid is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenBadInput",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text that is displayed when the field is empty.",
        "location": undefined,
        "memberType": undefined,
        "name": "placeholder",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Entity ID to share the image with.",
        "location": undefined,
        "memberType": undefined,
        "name": "shareWithEntityId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the editor content is valid. If invalid, the slds-has-error class is added. This value defaults to true.",
        "location": undefined,
        "memberType": undefined,
        "name": "valid",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The HTML content in the rich text editor.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of the toolbar. Accepted variant is bottom-toolbar which causes the toolbar to be displayed below the text box.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "A WYSIWYG editor with a customizable toolbar for entering rich text",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:inputRichText",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:insertImageButton" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "Button to insert an inline image in lightning:inputRichText. This component requires API version 43.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:insertImageButton",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:isUrlAddressable" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "An object with a String 'type' property and Object 'attributes' and 'state' properties.",
        "location": undefined,
        "memberType": undefined,
        "name": "pageReference",
        "type": "object",
      },
    ],
    "documentation": "This interface is used to indicate that a component can be directly navigated to through a URL.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:isUrlAddressable",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:layout" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Body of the layout component.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Determines how to spread the layout items horizontally. The alignment options are center, space, spread, and end.",
        "location": undefined,
        "memberType": undefined,
        "name": "horizontalAlign",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Determines whether to wrap the child items when they exceed the layout width. If true, the items wrap to the following line. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "multipleRows",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Pulls layout items to the layout boundaries and corresponds to the padding size on the layout item. Possible values are small, medium, or large.",
        "location": undefined,
        "memberType": undefined,
        "name": "pullToBoundary",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Determines how to spread the layout items vertically. The alignment options are start, center, end, and stretch.",
        "location": undefined,
        "memberType": undefined,
        "name": "verticalAlign",
        "type": "string",
      },
    ],
    "documentation": "Represents a responsive grid system for arranging containers on a page.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:layout",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:layoutItem" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a direction to bump the alignment of adjacent layout items. Allowed values are left, top, right, bottom.",
        "location": undefined,
        "memberType": undefined,
        "name": "alignmentBump",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Make the item fluid so that it absorbs any extra space in its container or shrinks when there is less space. Allowed values are: auto (columns grow or shrink equally as space allows), shrink (columns shrink equally as space decreases), no-shrink (columns don't shrink as space reduces), grow (columns grow equally as space increases), no-grow (columns don't grow as space increases), no-flex (columns don't grow or shrink as space changes). Use a comma-separated value for multiple options, such as 'auto, no-shrink'.",
        "location": undefined,
        "memberType": undefined,
        "name": "flexibility",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If the viewport is divided into 12 parts, this attribute indicates the relative space the container occupies on device-types larger than desktop. It is expressed as an integer from 1 through 12.",
        "location": undefined,
        "memberType": undefined,
        "name": "largeDeviceSize",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If the viewport is divided into 12 parts, this attribute indicates the relative space the container occupies on device-types larger than tablet. It is expressed as an integer from 1 through 12.",
        "location": undefined,
        "memberType": undefined,
        "name": "mediumDeviceSize",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Sets padding to either the right and left sides of a container, or all sides of a container. Allowed values are horizontal-small, horizontal-medium, horizontal-large, around-small, around-medium, around-large.",
        "location": undefined,
        "memberType": undefined,
        "name": "padding",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If the viewport is divided into 12 parts, size indicates the relative space the container occupies. Size is expressed as an integer from 1 through 12. This applies for all device-types.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If the viewport is divided into 12 parts, this attribute indicates the relative space the container occupies on device-types larger than mobile. It is expressed as an integer from 1 through 12.",
        "location": undefined,
        "memberType": undefined,
        "name": "smallDeviceSize",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "The basic element of lightning:layout.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:layoutItem",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:listView" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the inline edit of cells is enabled. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "enableInlineEdit",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The developer name of the List View",
        "location": undefined,
        "memberType": undefined,
        "name": "listName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The API name of the object to be displayed in this List View",
        "location": undefined,
        "memberType": undefined,
        "name": "objectApiName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the number of rows to initially load and additional rows after each subsequent 'Load More' click. The default and maximum number of rows value is 50.",
        "location": undefined,
        "memberType": undefined,
        "name": "rows",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the action bar displays. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "showActionBar",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether row level actions are displayed (as a dropdown menu in the last column of the row). This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "showRowLevelActions",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the search bar displays. This value defaults to false. Note: The server side may still disable search if it does not support searching.",
        "location": undefined,
        "memberType": undefined,
        "name": "showSearchBar",
        "type": "boolean",
      },
    ],
    "documentation": "Displays a List View of the specified object. This component requires API 42.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:listView",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:map" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A location to use as the map's center. If center is not specified, the map centers automatically.",
        "location": undefined,
        "memberType": undefined,
        "name": "center",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays or hides the list of locations. Valid values are visible, hidden, or auto. This value defaults to auto, which shows the list only when multiple markers are present. Passing in an invalid value hides the list view.",
        "location": undefined,
        "memberType": undefined,
        "name": "listView",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Array containing one or more objects with the address or coordinates to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "mapMarkers",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Provides the heading title for the markers when the map uses multiple markers. The title is displayed as a header for the list of clickable addresses.",
        "location": undefined,
        "memberType": undefined,
        "name": "markersTitle",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Action fired when a marker is selected. Select a marker by clicking it on the map or in the list of locations.",
        "location": undefined,
        "memberType": undefined,
        "name": "onmarkerselect",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Provides the value of the currently selected marker. Returns undefined if you don’t pass a value to mapMarkers.",
        "location": undefined,
        "memberType": undefined,
        "name": "selectedMarkerValue",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Shows footer with 'Open in Google Maps' link that opens an external window to display the selected marker location in Google Maps. Default value is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "showFooter",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Corresponds to zoom levels defined in Google Maps API. If not specified, the map component automatically chooses an appropriate zoom level to show all markers with comfortable margins.",
        "location": undefined,
        "memberType": undefined,
        "name": "zoomLevel",
        "type": "integer",
      },
    ],
    "documentation": "A lightning:map component securely displays a map of one or more locations. This component requires API version 44.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:map",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:menuItem" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If not specified, the menu item is not checkable. If true, a check mark is shown to the left of the menu item. If false, a check mark is not shown but there is space to accommodate one.",
        "location": undefined,
        "memberType": undefined,
        "name": "checked",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If true, the menu item is not actionable and is shown as disabled.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of a file that's downloaded when clicking a link in the menu item. Used with the href attribute. ",
        "location": undefined,
        "memberType": undefined,
        "name": "download",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Describes the reason for showing the draft indicator. This is required when the isDraft attribute is true",
        "location": undefined,
        "memberType": undefined,
        "name": "draftAlternativeText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "URL for a link to use for the menu item.",
        "location": undefined,
        "memberType": undefined,
        "name": "href",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of an icon to display after the text of the menu item.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If true, the menu item shows a draft indicator. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "isDraft",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text of the menu item.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "DEPRECATED. The action triggered when this menu item is selected.",
        "location": undefined,
        "memberType": undefined,
        "name": "onactive",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of an icon to display before the text of the menu item.",
        "location": undefined,
        "memberType": undefined,
        "name": "prefixIconName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A value associated with the menu item.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Represents a list item in a menu.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:menuItem",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:messageChannel" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Subscribes a listener function to be invoked when a message is published on this channel.",
        "location": undefined,
        "memberType": undefined,
        "name": "onMessage",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The scope that a component is subscribed to. This only applies when a listener is provided to \`onMessage\`",
        "location": undefined,
        "memberType": undefined,
        "name": "scope",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Name of MessageChannel associated with this component.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
    ],
    "documentation": "This component allows you to subscribe and publish messages via the Lightning Message Service.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:messageChannel",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:navigation" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "Generates URL for a given pageReference. This component requires API version 43.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:navigation",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:navigationItemAPI" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "This component allows you to access methods for programmatically controlling navigation items in Lightning console apps, where navigation items display in an item menu. This component requires API version 43.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:navigationItemAPI",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:notificationsLibrary" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "Displays messages via notices and toasts. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:notificationsLibrary",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:omniToolkitAPI" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "This component provides access to the API for the Omni-channel toolkit.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:omniToolkitAPI",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:outputField" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The API name of the field to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "fieldName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Changes the appearance of the output. Accepted variants include standard and label-hidden. This value defaults to standard.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Represents a read-only display of a label, help text, and value for a field on a Salesforce object. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:outputField",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:overlayLibrary" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "Displays messages via modals and popovers. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:overlayLibrary",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:pageReferenceUtils" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "Provides utilities for encoding and decoding default field values. This component is supported only in Lightning Experience in all editions. This component is not supported in Lightning Out, Lightning communities, or the Salesforce mobile app. This component requires API version 48.0 or later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:pageReferenceUtils",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:path" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specified whether the Mark Complete button is displayed next to the path. If true, the button is not displayed. The Mark Complete button is displayed by default.",
        "location": undefined,
        "memberType": undefined,
        "name": "hideUpdateButton",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a step on the path is clicked.",
        "location": undefined,
        "memberType": undefined,
        "name": "onselect",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The record's ID",
        "location": undefined,
        "memberType": undefined,
        "name": "recordId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Changes the appearance of the path. Choose between linear and non-linear formats. In linear paths, completed steps show a checkmark. In non-linear paths, completed steps show the step name. We show linear paths by default.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Displays a path driven by a picklist field and Path Setup metadata. This component requires API 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:path",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:picklistPath" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a step on the path is clicked.",
        "location": undefined,
        "memberType": undefined,
        "name": "onselect",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The API name of the field from which the path is derived. For example, StageName for Opportunity.",
        "location": undefined,
        "memberType": undefined,
        "name": "picklistFieldApiName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The record's ID",
        "location": undefined,
        "memberType": undefined,
        "name": "recordId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Changes the appearance of the path. Choose between linear and non-linear formats. In linear paths, completed steps show a checkmark. In non-linear paths, completed steps show the step name. We show linear paths by default.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Displays a path based on a specified picklist field. This component requires API 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:picklistPath",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:pill" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the pill has errors. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "hasError",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The URL of the page that the link goes to.",
        "location": undefined,
        "memberType": undefined,
        "name": "href",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text label that displays in the pill.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The icon or figure that's displayed next to the textual information.",
        "location": undefined,
        "memberType": undefined,
        "name": "media",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name for the pill. This value is optional and can be used to identify the pill in a callback.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the button is clicked.",
        "location": undefined,
        "memberType": undefined,
        "name": "onclick",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the pill is removed.",
        "location": undefined,
        "memberType": undefined,
        "name": "onremove",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "A pill displays a label that can contain links and can be removed from view.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:pill",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:pillContainer" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "An array of items to be rendered as pills in a container.",
        "location": undefined,
        "memberType": undefined,
        "name": "items",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Aria label for the pill container.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a pill is removed.",
        "location": undefined,
        "memberType": undefined,
        "name": "onitemremove",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Whether keep pills in single line.",
        "location": undefined,
        "memberType": undefined,
        "name": "singleLine",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "A list of pills grouped in a container. This component requires API version 42.0 and later. ",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:pillContainer",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:progressBar" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The size of the progress bar. Valid values are x-small, small, medium, and large. The default value is medium.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The percentage value of the progress bar.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant of the progress bar. Valid values are base and circular.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Displays a horizontal progress bar from left to right to indicate the progress of an operation. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:progressBar",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:progressIndicator" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The current step, which must match the value attribute of one of progressStep components. If a step is not provided, the value of the first progressStep component is used.",
        "location": undefined,
        "memberType": undefined,
        "name": "currentStep",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates whether the current step is in error state and displays an error icon on the step indicator. Applies to the base type only. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "hasError",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Changes the visual pattern of the indicator. Valid values are base and path. This value defaults to base.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Changes the appearance of the progress indicator for the base type only. Valid values are base or shaded. The shaded variant adds a light gray border to the step indicators. This value defaults to base.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Provides a visual indication on the progress of a particular process. This component is available in version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:progressIndicator",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:progressRing" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Controls which way the color flows from the top of the ring, either clockwise or counterclockwise. Valid values include fill and drain. The fill value corresponds to a color flow in the clockwise direction. The drain value indicates a color flow in the counterclockwise direction.",
        "location": undefined,
        "memberType": undefined,
        "name": "direction",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The size of the progress ring. Valid values include medium and large.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The percentage value of the progress ring. The value must be a number from 0 to 100. A value of 50 corresponds to a color fill of half the ring in a clockwise or counterclockwise direction, depending on the direction attribute.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Changes the appearance of the progress ring. Accepted variants include base, active-step, warning, expired, and base-autocomplete.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Displays a circular progress indicator to provide feedback about an action or process. This component requires API version 48.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:progressRing",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:quickActionAPI" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "This component allows you to access methods for programmatically controlling actions on record pages in Lightning Experience. This component requires API version 43.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:quickActionAPI",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:quipCard" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "ID of the Salesforce record to display the card for.",
        "location": undefined,
        "memberType": undefined,
        "name": "parentRecordId",
        "type": "string",
      },
    ],
    "documentation": "Quip card",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:quipCard",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:radioGroup" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input element should be disabled. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text label for the radio group.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Optional message displayed when no radio button is selected and the required attribute is set to true.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenValueMissing",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the name of an input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a value attribute changes.",
        "location": undefined,
        "memberType": undefined,
        "name": "onchange",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Array of label-value pairs for each radio button.",
        "location": undefined,
        "memberType": undefined,
        "name": "options",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input field is read-only. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "readonly",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input field must be filled out before submitting the form. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The style of the radio group. Valid types are radio or button. The default is radio.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Represents the validity states that an element can be in, with respect to constraint validation.",
        "location": undefined,
        "memberType": undefined,
        "name": "validity",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the value of an input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of the radio group. Accepted variants include standard, label-hidden, label-inline, and label-stacked. This value defaults to standard. Use label-hidden to hide the label but make it available to assistive technology. Use label-inline to horizontally align the label and radio group. Use label-stacked to place the label above the radio group.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "A radio button group that can have a single option selected. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:radioGroup",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:recordEditForm" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Sets the arrangement style of fields and labels in the form.  Accepted values are compact, comfy, and auto (default). Use compact to display fields and their labels on the same line. Use comfy to display fields below their labels. Use auto to let the component dynamically set the density according to the user's Display Density setting and the width of the form.",
        "location": undefined,
        "memberType": undefined,
        "name": "density",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The API name of the object.",
        "location": undefined,
        "memberType": undefined,
        "name": "objectApiName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when there is an error on form submission.",
        "location": undefined,
        "memberType": undefined,
        "name": "onerror",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the form data is loaded.",
        "location": undefined,
        "memberType": undefined,
        "name": "onload",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the form is submitted. The form can be submitted only after it's loaded.",
        "location": undefined,
        "memberType": undefined,
        "name": "onsubmit",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the form is saved.",
        "location": undefined,
        "memberType": undefined,
        "name": "onsuccess",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The ID of the record to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "recordId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The ID of the record type, which is required if you created multiple record types but don't have a default.",
        "location": undefined,
        "memberType": undefined,
        "name": "recordTypeId",
        "type": "string",
      },
    ],
    "documentation": "Represents a record edit layout that displays one or more fields, provided by lightning:outputField. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:recordEditForm",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:recordForm" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the number of columns for the form.",
        "location": undefined,
        "memberType": undefined,
        "name": "columns",
        "type": "",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Sets the arrangement style of fields and labels in the form.  Accepted values are compact, comfy, and auto (default). Use compact to display fields and their labels on the same line. Use comfy to display fields below their labels. Use auto to let the component dynamically set the density according to the user's Display Density setting and the width of the form.",
        "location": undefined,
        "memberType": undefined,
        "name": "density",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "List of fields to be displayed. The fields display in the order you list them.",
        "location": undefined,
        "memberType": undefined,
        "name": "fields",
        "type": "string[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The type of layout to use to display the form fields. Possible values: Compact, Full. When creating a new record, only the full layout is supported.",
        "location": undefined,
        "memberType": undefined,
        "name": "layoutType",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the interaction and display style for the form. Possible values: view, edit, readonly. If a record ID is not provided, the default mode is edit, which displays a form to create new records. If a record ID is provided, the default mode is view, which displays field values with edit icons on updateable fields.",
        "location": undefined,
        "memberType": undefined,
        "name": "mode",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The API name of the object.",
        "location": undefined,
        "memberType": undefined,
        "name": "objectApiName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when there is an error on form submission.",
        "location": undefined,
        "memberType": undefined,
        "name": "onerror",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the form data is loaded.",
        "location": undefined,
        "memberType": undefined,
        "name": "onload",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the form is submitted. The form can be submitted only after it's loaded.",
        "location": undefined,
        "memberType": undefined,
        "name": "onsubmit",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the form is saved.",
        "location": undefined,
        "memberType": undefined,
        "name": "onsuccess",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The ID of the record to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "recordId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The ID of the record type, which is required if you created multiple record types but don't have a default.",
        "location": undefined,
        "memberType": undefined,
        "name": "recordTypeId",
        "type": "string",
      },
    ],
    "documentation": "Creates an editable form or display form for a record. This component requires API version 43.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:recordForm",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:recordHomeTemplate" => TagInfo {
    "attributes": Array [],
    "documentation": "Indicates the component can be used as a flexipage page template for the RECORD_PAGE page type",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:recordHomeTemplate",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:recordViewForm" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Sets the arrangement style of fields and labels in the form.  Accepted values are compact, comfy, and auto (default). Use compact to display fields and their labels on the same line. Use comfy to display fields below their labels. Use auto to let the component dynamically set the density according to the user's Display Density setting and the width of the form.",
        "location": undefined,
        "memberType": undefined,
        "name": "density",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The API name of the object.",
        "location": undefined,
        "memberType": undefined,
        "name": "objectApiName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The ID of the record to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "recordId",
        "type": "string",
      },
    ],
    "documentation": "Represents a record view that displays one or more fields, provided by lightning:outputField. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:recordViewForm",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:relativeDateTime" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The timestamp or JavaScript Date object to be formatted.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "object",
      },
    ],
    "documentation": "Displays the relative time difference between the source date-time and the provided date-time.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:relativeDateTime",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:select" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input element should be disabled. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text that describes the desired select input.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when the value is missing.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenValueMissing",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the name of an input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a value attribute changes.",
        "location": undefined,
        "memberType": undefined,
        "name": "onchange",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input field is read-only. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "readonly",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input field must be filled out before submitting the form. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Represents the validity states that an element can be in, with respect to constraint validation.",
        "location": undefined,
        "memberType": undefined,
        "name": "validity",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value of the select, also used as the default value to select the right option during init. If no value is provided, the first option will be selected.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of an input field. Accepted variants include standard, label-inline, label-hidden, and label-stacked. This value defaults to standard, which displays the label above the field. Use label-hidden to hide the label but make it available to assistive technology. Use label-inline to horizontally align the label and input field. Use label-stacked to place the label above the input field.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Represents a select input.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:select",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:slider" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The disabled value of the input range. This value default to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text label for the input range. Provide your own label to describe the slider. Otherwise, no label is displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The max value of the input range. This value defaults to 100.",
        "location": undefined,
        "memberType": undefined,
        "name": "max",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a bad input is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenBadInput",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a pattern mismatch is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenPatternMismatch",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a range overflow is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenRangeOverflow",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a range underflow is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenRangeUnderflow",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a step mismatch is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenStepMismatch",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when the value is too long.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenTooLong",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a type mismatch is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenTypeMismatch",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when the value is missing.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenValueMissing",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The min value of the input range. This value defaults to 0.",
        "location": undefined,
        "memberType": undefined,
        "name": "min",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the slider releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the slider value changes. You must pass any newly selected value back to the slider component to bind the new value to the slider.",
        "location": undefined,
        "memberType": undefined,
        "name": "onchange",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the slider receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The size value of the input range. This value default to empty, which is the base. Supports x-small, small, medium, and large.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The step increment value of the input range. Example steps include 0.1, 1, or 10. This value defaults to 1.",
        "location": undefined,
        "memberType": undefined,
        "name": "step",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The type of the input range position. This value defaults to horizontal.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The numerical value of the input range. This value defaults to 0.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of the slider. Accepted variants include standard and label-hidden. This value defaults to standard.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "An input range slider for specifying a value between two specified numbers. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:slider",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:spinner" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The alternative text used to describe the reason for the wait and need for a spinner.",
        "location": undefined,
        "memberType": undefined,
        "name": "alternativeText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The size of the spinner. Accepted sizes are small, medium, and large. This value defaults to medium.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of the spinner. Accepted variants are base, brand, and inverse. This value defaults to base.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Displays an animated spinner.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:spinner",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:tab" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the tab.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "componentdefref[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Alternative text for the icon specified by endIconName.",
        "location": undefined,
        "memberType": undefined,
        "name": "endIconAlternativeText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Lightning Design System name of an icon to display at the end of the tab label. Specify the name in the format 'utility:check' where 'utility' is the category, and 'check' is the icon to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "endIconName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Alternative text for the icon specified by iconName.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconAssistiveText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Lightning Design System name of an icon to display at the start of the tab label. Specify the name in the format 'utility:down' where 'utility' is the category, and 'down' is the icon to be displayed. Only utility icons can be used in this component.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The optional ID is used during tabset's onselect event to determine which tab was clicked.",
        "location": undefined,
        "memberType": undefined,
        "name": "id",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text that appears on the tab. The attribute accepts string values, but for compatibility with previous releases also accepts a component type. Only the text portion of the label value displays and any CSS classes that are applied are ignored.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when this tab becomes active.",
        "location": undefined,
        "memberType": undefined,
        "name": "onactive",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether there's an error in the tab content. An error icon is displayed to the right of the tab label.",
        "location": undefined,
        "memberType": undefined,
        "name": "showErrorIndicator",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "A single tab that is nested in a lightning:tabset component.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:tab",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:tabset" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. This could be one or more lightning:tab components.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "componentdefref[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action that will run when the tab is clicked.",
        "location": undefined,
        "memberType": undefined,
        "name": "onselect",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Allows you to set a specific tab to open by default. If this attribute is not used, the first tab opens by default.",
        "location": undefined,
        "memberType": undefined,
        "name": "selectedTabId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of the tabset. Accepted variants are default, scoped, and vertical.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Represents a list of tabs.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:tabset",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:textarea" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies a shortcut key to activate or focus an element.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input element should be disabled. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text that describes the desired textarea input.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum number of characters allowed in the textarea.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxlength",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when a bad input is detected.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenBadInput",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when the value is too long.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenTooLong",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when the value is too short.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenTooShort",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Error message to be displayed when the value is missing.",
        "location": undefined,
        "memberType": undefined,
        "name": "messageWhenValueMissing",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The minimum number of characters allowed in the textarea.",
        "location": undefined,
        "memberType": undefined,
        "name": "minlength",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the name of an input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element releases focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onblur",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a value attribute changes.",
        "location": undefined,
        "memberType": undefined,
        "name": "onchange",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the element receives focus.",
        "location": undefined,
        "memberType": undefined,
        "name": "onfocus",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
        "location": undefined,
        "memberType": undefined,
        "name": "placeholder",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input field is read-only. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "readonly",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies that an input field must be filled out before submitting the form. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the tab order of an element when the Tab key is used for navigating. The tabindex value can be set to 0 or -1. The default is 0, which means that the component is focusable and participates in sequential keyboard navigation. -1 means that the component is focusable but does not participate in keyboard navigation.",
        "location": undefined,
        "memberType": undefined,
        "name": "tabindex",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Represents the validity states that an element can be in, with respect to constraint validation.",
        "location": undefined,
        "memberType": undefined,
        "name": "validity",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value of the textarea, also used as the default value during init.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The variant changes the appearance of an input field. Accepted variants include standard, label-inline, label-hidden, and label-stacked. This value defaults to standard, which displays the label above the field. Use label-hidden to hide the label but make it available to assistive technology. Use label-inline to horizontally align the label and input field. Use label-stacked to place the label above the input field.",
        "location": undefined,
        "memberType": undefined,
        "name": "variant",
        "type": "string",
      },
    ],
    "documentation": "Represents a multiline text input.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:textarea",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:tile" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The URL of the page that the link goes to.",
        "location": undefined,
        "memberType": undefined,
        "name": "href",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text label that displays in the tile and hover text.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The icon or figure that's displayed next to the textual information.",
        "location": undefined,
        "memberType": undefined,
        "name": "media",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "A grouping of related information associated with a record.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:tile",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:tree" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text that's displayed as the tree heading.",
        "location": undefined,
        "memberType": undefined,
        "name": "header",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "An array of key-value pairs that describe the tree. Keys include label, name, disabled, expanded, and items.",
        "location": undefined,
        "memberType": undefined,
        "name": "items",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a tree item is selected.",
        "location": undefined,
        "memberType": undefined,
        "name": "onselect",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Selects and highlights the specified tree item. Tree item names are case-sensitive. If the tree item is nested, selecting this item also expands the parent branches.",
        "location": undefined,
        "memberType": undefined,
        "name": "selectedItem",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Displays a nested tree. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:tree",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:treeGrid" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Array of the columns object that's used to define the data types. Required properties include 'label', 'dataKey', and 'type'. The default type is 'text'.",
        "location": undefined,
        "memberType": undefined,
        "name": "columns",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The array of data to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "data",
        "type": "object",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The array of unique row IDs that are expanded.",
        "location": undefined,
        "memberType": undefined,
        "name": "expandedRows",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Hides or displays the checkbox column for row selection. To hide the checkbox column, set hideCheckboxColumn to true. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "hideCheckboxColumn",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether more data is being loaded and displays a spinner if so. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "isLoading",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Required for better performance. Associates each row with a unique ID.",
        "location": undefined,
        "memberType": undefined,
        "name": "keyField",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum width for all columns. The default is 1000px.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxColumnWidth",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The minimum width for all columns. The default is 50px.",
        "location": undefined,
        "memberType": undefined,
        "name": "minColumnWidth",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when the table renders columns the first time and every time its resized an specific column.",
        "location": undefined,
        "memberType": undefined,
        "name": "onresize",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when an operation its clicked. By default its to closes the actions menu.",
        "location": undefined,
        "memberType": undefined,
        "name": "onrowaction",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a row is selected.",
        "location": undefined,
        "memberType": undefined,
        "name": "onrowselection",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when a row is toggled (expanded or collapsed).",
        "location": undefined,
        "memberType": undefined,
        "name": "ontoggle",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The action triggered when all rows are toggled (expanded or collapsed).",
        "location": undefined,
        "memberType": undefined,
        "name": "ontoggleall",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether column resizing is disabled. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "resizeColumnDisabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Determines where to start counting the row number. The default is 0.",
        "location": undefined,
        "memberType": undefined,
        "name": "rowNumberOffset",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The array of unique row IDs that are selected.",
        "location": undefined,
        "memberType": undefined,
        "name": "selectedRows",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Hides or displays the row number column. To show the row number column, set showRowNumberColumn to true. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "showRowNumberColumn",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Displays a hierarchical view of data in a table. This component requires API version 42.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:treeGrid",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:unsavedChanges" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Label for the unsaved content which appears in prompt for save or discard",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Action to handle discarding unsaved content",
        "location": undefined,
        "memberType": undefined,
        "name": "ondiscard",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Action to handle saving unsaved content",
        "location": undefined,
        "memberType": undefined,
        "name": "onsave",
        "type": "action",
      },
    ],
    "documentation": "A component that can be used to notify the UI containment hierarchy of unsaved changes",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:unsavedChanges",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:utilityBarAPI" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "The public API for the Utility Bar.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:utilityBarAPI",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:utilityItem" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Controls the availability of pop-out functionality.  Set to false to remove the pop-out option for the utility item.",
        "location": undefined,
        "memberType": undefined,
        "name": "supportsPopOut",
        "type": "boolean",
      },
    ],
    "documentation": "This interface is used to denote that a component can be included in the utility bar.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:utilityItem",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:verticalNavigation" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The aria label attribute for the navigation component",
        "location": undefined,
        "memberType": undefined,
        "name": "ariaLabel",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specify true to reduce spacing between navigation items. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "compact",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Action fired before an item is selected. The event params include the \`name\` of the selected item. To prevent the onselect handler from running, call event.preventDefault() in the onbeforeselect handler.",
        "location": undefined,
        "memberType": undefined,
        "name": "onbeforeselect",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Action fired when an item is selected. The event params include the \`name\` of the selected item.",
        "location": undefined,
        "memberType": undefined,
        "name": "onselect",
        "type": "action",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Name of the nagivation item to make active.",
        "location": undefined,
        "memberType": undefined,
        "name": "selectedItem",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specify true when the vertical navigation is sitting on top of a shaded background. This value defaults to false.",
        "location": undefined,
        "memberType": undefined,
        "name": "shaded",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Represents a vertical list of links that either take the user to another page or parts of the page the user is in. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:verticalNavigation",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:verticalNavigationItem" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The URL of the page that the navigation item goes to.",
        "location": undefined,
        "memberType": undefined,
        "name": "href",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed for the navigation item.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A unique identifier for the navigation item.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "A text-only link within lightning:verticalNavigationSection or lightning:verticalNavigationOverflow. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:verticalNavigationItem",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:verticalNavigationItemBadge" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Assistive text describing the number in the badge. This is used to enhance accessibility and is not displayed to the user.",
        "location": undefined,
        "memberType": undefined,
        "name": "assistiveText",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The number to show inside the badge. If this value is zero the badge will be hidden.",
        "location": undefined,
        "memberType": undefined,
        "name": "badgeCount",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The URL of the page that the navigation item goes to.",
        "location": undefined,
        "memberType": undefined,
        "name": "href",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed for this navigation item.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A unique identifier for this navigation item.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "A link and badge within a lightning:verticalNavigationSection or lightning:verticalNavigationOverflow. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:verticalNavigationItemBadge",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:verticalNavigationItemIcon" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The URL of the page that the navigation item goes to.",
        "location": undefined,
        "memberType": undefined,
        "name": "href",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed for this navigation item.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A unique identifier for this navigation item.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "A link and icon within a lightning:verticalNavigationSection or lightning:verticalNavigationOverflow. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:verticalNavigationItemIcon",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:verticalNavigationOverflow" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Represents an overflow of items from a preceding lightning:verticalNavigationSection, with the ability to toggle visibility. This component requires API 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:verticalNavigationOverflow",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:verticalNavigationSection" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class for the outer element, in addition to the component's base classes.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The heading text for this section.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays tooltip text when the mouse moves over the element.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Represents a section within a lightning:verticalNavigation. This component requires API version 41.0 and later.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:verticalNavigationSection",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightning:workspaceAPI" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "This is the Public API for accessing/manipulating workspaces (Tabs and Subtabs)",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightning:workspaceAPI",
    "namespace": "lightning",
    "properties": undefined,
    "type": 0,
  },
  "lightningcommunity:allowInRelaxedCSP" => TagInfo {
    "attributes": Array [],
    "documentation": "This interface is used to indicate that a component is allowed in a Relaxed CSP community page.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightningcommunity:allowInRelaxedCSP",
    "namespace": "lightningcommunity",
    "properties": undefined,
    "type": 0,
  },
  "lightningcommunity:backButton" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Styling class for back button.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The Lightning Design System name of the icon. Only utility icons can be used in this component.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Event handler action fired after every page navigation is complete. 'navigationcomplete' event provides 'canGoBack' boolean parameter value.",
        "location": undefined,
        "memberType": undefined,
        "name": "onnavigationcomplete",
        "type": "action",
      },
    ],
    "documentation": "Icon button to navigate to previous community page in myCommnunity IOS app.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightningcommunity:backButton",
    "namespace": "lightningcommunity",
    "properties": undefined,
    "type": 0,
  },
  "lightningsnapin:minimizedAPI" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "Enables you to customize your user interface for the minimized snap-in in Snap-ins for web.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightningsnapin:minimizedAPI",
    "namespace": "lightningsnapin",
    "properties": undefined,
    "type": 0,
  },
  "lightningsnapin:minimizedUI" => TagInfo {
    "attributes": Array [],
    "documentation": "This marker interface is used to indicate that a component can be used as the user interface for a minimized snap-in.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightningsnapin:minimizedUI",
    "namespace": "lightningsnapin",
    "properties": undefined,
    "type": 0,
  },
  "lightningsnapin:prechatAPI" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "Enables customization of the user interface for the pre-chat page in Snap-ins Chat. Your custom pre-chat component must implement the lightningsnapin:prechatUI interface.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightningsnapin:prechatAPI",
    "namespace": "lightningsnapin",
    "properties": undefined,
    "type": 0,
  },
  "lightningsnapin:prechatUI" => TagInfo {
    "attributes": Array [],
    "documentation": "This marker interface is used to indicate that a component can be used with Snap-Ins Pre-Chat.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightningsnapin:prechatUI",
    "namespace": "lightningsnapin",
    "properties": undefined,
    "type": 0,
  },
  "lightningsnapin:settingsAPI" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "Enables you to fetch certain settings from within your custom components for Snap-ins for web.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "lightningsnapin:settingsAPI",
    "namespace": "lightningsnapin",
    "properties": undefined,
    "type": 0,
  },
  "ltng:allowGuestAccess" => TagInfo {
    "attributes": Array [],
    "documentation": "Allows guest user access on an application.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ltng:allowGuestAccess",
    "namespace": "ltng",
    "properties": undefined,
    "type": 0,
  },
  "ltng:require" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The set of scripts to load in the specified order.",
        "location": undefined,
        "memberType": undefined,
        "name": "scripts",
        "type": "string[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The set of style sheets to load in the specified order.",
        "location": undefined,
        "memberType": undefined,
        "name": "styles",
        "type": "string[]",
      },
    ],
    "documentation": "Loads scripts and stylesheets while maintaining dependency order.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ltng:require",
    "namespace": "ltng",
    "properties": undefined,
    "type": 0,
  },
  "ui:actionMenuItem" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Set to true to hide menu after the menu item is selected.",
        "location": undefined,
        "memberType": undefined,
        "name": "hideMenuAfterSelected",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed on the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The status of the menu item. True means this menu item is selected; False is not selected.",
        "location": undefined,
        "memberType": undefined,
        "name": "selected",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The concrete type of the menu item. Accepted values are 'action', 'checkbox', 'radio', 'separator' or any namespaced component descriptor, e.g. ns:xxxxmenuItem.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:menuItem with lightning:buttonMenu instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:actionMenuItem",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:button" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The keyboard access key that puts the button in focus. When the button is in focus, pressing Enter clicks the button.",
        "location": undefined,
        "memberType": undefined,
        "name": "accesskey",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed in a tooltip when the mouse pointer hovers over the button.",
        "location": undefined,
        "memberType": undefined,
        "name": "buttonTitle",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the type of button. Possible values: reset, submit, or button. This value defaults to button.",
        "location": undefined,
        "memberType": undefined,
        "name": "buttonType",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the button. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed on the button. Corresponds to the value attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the label. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:button, lightning:buttonIcon, or lightning:buttonIconStateful instead. For button groups, use lightning:buttonGroup.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:button",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:checkboxMenuItem" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Set to true to hide menu after the menu item is selected.",
        "location": undefined,
        "memberType": undefined,
        "name": "hideMenuAfterSelected",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed on the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The status of the menu item. True means this menu item is selected; False is not selected.",
        "location": undefined,
        "memberType": undefined,
        "name": "selected",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The concrete type of the menu item. Accepted values are 'action', 'checkbox', 'radio', 'separator' or any namespaced component descriptor, e.g. ns:xxxxmenuItem.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
    ],
    "documentation": "​Deprecated as of API version 47.0. Use lightning:menuItem with lightning:buttonMenu instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:checkboxMenuItem",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputCheckbox" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed on the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is required. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the required indicator component",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredIndicatorClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The input value attribute.",
        "location": undefined,
        "memberType": undefined,
        "name": "text",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \\"change,click\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "updateOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates whether the status of the option is selected. Default value is “false”.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "boolean",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:input with checkbox, toggle, or checkbox-button type instead. For checkbox groups, use lightning:checkboxGroup.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputCheckbox",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputCurrency" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The format of the number. For example, format=“.00” displays the number followed by two decimal places. If not specified, the Locale default format will be used.",
        "location": undefined,
        "memberType": undefined,
        "name": "format",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxlength",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
        "location": undefined,
        "memberType": undefined,
        "name": "placeholder",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is required. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the required indicator component",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredIndicatorClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \\"change\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "updateOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The input value of the number.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "decimal",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:input with number type and currency formatter instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputCurrency",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputDate" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates if an icon that triggers the date picker is displayed in the field. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "displayDatePicker",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The java.text.SimpleDateFormat style format string.",
        "location": undefined,
        "memberType": undefined,
        "name": "format",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Deprecated. The language locale used to format date time. It only allows to use the value which is provided by Locale Value Provider, otherwise, it falls back to the value of $Locale.langLocale. It will be removed in an upcoming release.",
        "location": undefined,
        "memberType": undefined,
        "name": "langLocale",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is required. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the required indicator component",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredIndicatorClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \\"change\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "updateOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The input value of the date/time as an ISO string.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:input with date type instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputDate",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputDateTime" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates if an icon that triggers the date picker is displayed in the field. The default is false.",
        "location": undefined,
        "memberType": undefined,
        "name": "displayDatePicker",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The java.text.SimpleDateFormat style format string.",
        "location": undefined,
        "memberType": undefined,
        "name": "format",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Deprecated. The language locale used to format date time. It only allows to use the value which is provided by Locale Value Provider, otherwise, it falls back to the value of $Locale.langLocale. It will be removed in an upcoming release.",
        "location": undefined,
        "memberType": undefined,
        "name": "langLocale",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is required. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the required indicator component",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredIndicatorClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \\"change\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "updateOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The input value of the date/time as an ISO string.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:input with datetime type instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputDateTime",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputDefaultError" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors strings to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string[]",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:input with built-in field validation instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputDefaultError",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputEmail" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxlength",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
        "location": undefined,
        "memberType": undefined,
        "name": "placeholder",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is required. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the required indicator component",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredIndicatorClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \\"change\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "updateOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value currently in the input field.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:input with email type instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputEmail",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputNumber" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The format of the number. For example, format=“.00” displays the number followed by two decimal places. If not specified, the Locale default format will be used.",
        "location": undefined,
        "memberType": undefined,
        "name": "format",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxlength",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
        "location": undefined,
        "memberType": undefined,
        "name": "placeholder",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is required. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the required indicator component",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredIndicatorClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \\"change\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "updateOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The input value of the number.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "decimal",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:input with number type instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputNumber",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputPhone" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxlength",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
        "location": undefined,
        "memberType": undefined,
        "name": "placeholder",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is required. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the required indicator component",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredIndicatorClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \\"change\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "updateOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value currently in the input field.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:input with phone type instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputPhone",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputRadio" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether this radio button should be displayed in a disabled state. Disabled radio buttons can't be clicked. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed on the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is required. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the required indicator component",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredIndicatorClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The input value attribute.",
        "location": undefined,
        "memberType": undefined,
        "name": "text",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \\"change\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "updateOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates whether the status of the option is selected. Default value is “false”.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "boolean",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:input with radio type instead. For radio groups, use lightning:radioGroup.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputRadio",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputRichText" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The width of the text area, which is defined by the number of characters to display in a single row at a time. Default value is “20”.",
        "location": undefined,
        "memberType": undefined,
        "name": "cols",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The height of the editing area (that includes the editor content). This can be an integer, for pixel sizes, or any CSS-defined length unit.",
        "location": undefined,
        "memberType": undefined,
        "name": "height",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML textarea element.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxlength",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text that is displayed by default.",
        "location": undefined,
        "memberType": undefined,
        "name": "placeholder",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the text area should be rendered as read-only. Default value is “false”.",
        "location": undefined,
        "memberType": undefined,
        "name": "readonly",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is required. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the required indicator component",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredIndicatorClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether or not the textarea should be resizable.  Defaults to true.",
        "location": undefined,
        "memberType": undefined,
        "name": "resizable",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The height of the text area, which is defined by the number of rows to display at a time. Default value is “2”.",
        "location": undefined,
        "memberType": undefined,
        "name": "rows",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \\"change\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "updateOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value currently in the input field.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The editor UI outer width. This can be an integer, for pixel sizes, or any CSS-defined unit. If isRichText is set to false, use the cols attribute instead.",
        "location": undefined,
        "memberType": undefined,
        "name": "width",
        "type": "string",
      },
    ],
    "documentation": " Deprecated as of API version 47.0. This component is not supported by LockerService. Use lightning:inputRichText instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputRichText",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputSecret" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxlength",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
        "location": undefined,
        "memberType": undefined,
        "name": "placeholder",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is required. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the required indicator component",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredIndicatorClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \\"change\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "updateOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value currently in the input field.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:input with password type instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputSecret",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputSelect" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is a multiple select. Default value is “false”.",
        "location": undefined,
        "memberType": undefined,
        "name": "multiple",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A list of options to use for the select. Note: setting this attribute will make the component ignore v.body",
        "location": undefined,
        "memberType": undefined,
        "name": "options",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is required. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the required indicator component",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredIndicatorClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \\"change\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "updateOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value currently in the input field.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:select or lightning:combobox instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputSelect",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputSelectOption" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed on the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The name of the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "name",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The input value attribute.",
        "location": undefined,
        "memberType": undefined,
        "name": "text",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates whether the status of the option is selected. Default value is “false”.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "boolean",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:select or lightning:combobox instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputSelectOption",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputText" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxlength",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
        "location": undefined,
        "memberType": undefined,
        "name": "placeholder",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is required. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the required indicator component",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredIndicatorClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \\"change\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "updateOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value currently in the input field.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:input instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputText",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputTextArea" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The width of the text area, which is defined by the number of characters to display in a single row at a time. Default value is “20”.",
        "location": undefined,
        "memberType": undefined,
        "name": "cols",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML textarea element.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxlength",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text that is displayed by default.",
        "location": undefined,
        "memberType": undefined,
        "name": "placeholder",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the text area should be rendered as read-only. Default value is “false”.",
        "location": undefined,
        "memberType": undefined,
        "name": "readonly",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is required. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the required indicator component",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredIndicatorClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether or not the textarea should be resizable.  Defaults to true.",
        "location": undefined,
        "memberType": undefined,
        "name": "resizable",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The height of the text area, which is defined by the number of rows to display at a time. Default value is “2”.",
        "location": undefined,
        "memberType": undefined,
        "name": "rows",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \\"change\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "updateOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value currently in the input field.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:textarea instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputTextArea",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:inputURL" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The list of errors to be displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "errors",
        "type": "object[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the label component",
        "location": undefined,
        "memberType": undefined,
        "name": "labelClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "maxlength",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
        "location": undefined,
        "memberType": undefined,
        "name": "placeholder",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the input is required. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "required",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS class of the required indicator component",
        "location": undefined,
        "memberType": undefined,
        "name": "requiredIndicatorClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.",
        "location": undefined,
        "memberType": undefined,
        "name": "size",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \\"change\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "updateOn",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The value currently in the input field.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:input with url type instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:inputURL",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:menu" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:buttonMenu instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:menu",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:menuItem" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Set to true to hide menu after the menu item is selected.",
        "location": undefined,
        "memberType": undefined,
        "name": "hideMenuAfterSelected",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed on the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The status of the menu item. True means this menu item is selected; False is not selected.",
        "location": undefined,
        "memberType": undefined,
        "name": "selected",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The concrete type of the menu item. Accepted values are 'action', 'checkbox', 'radio', 'separator' or any namespaced component descriptor, e.g. ns:xxxxmenuItem.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:menuItem with lightning:buttonMenu instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:menuItem",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:menuItemSeparator" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:menuDivider with lightning:buttonMenu instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:menuItemSeparator",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:menuList" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Move the popup target up when there is not enough space at the bottom to display. Note: even if autoPosition is set to false, popup will still position the menu relative to the trigger. To override default positioning, use manualPosition attribute.",
        "location": undefined,
        "memberType": undefined,
        "name": "autoPosition",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Close target when user clicks or taps outside of the target",
        "location": undefined,
        "memberType": undefined,
        "name": "closeOnClickOutside",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates whether to close the target list on tab key or not.",
        "location": undefined,
        "memberType": undefined,
        "name": "closeOnTabKey",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Whether or not to apply an overlay under the target.",
        "location": undefined,
        "memberType": undefined,
        "name": "curtain",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A list of menu items set explicitly using instances of the Java class: aura.​components.​ui.MenuItem.",
        "location": undefined,
        "memberType": undefined,
        "name": "menuItems",
        "type": "list",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Controls the visibility of the menu. The default is false, which hides the menu.",
        "location": undefined,
        "memberType": undefined,
        "name": "visible",
        "type": "boolean",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:buttonMenu instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:menuList",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:menuTrigger" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed on the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text to display as a tooltip when the mouse pointer hovers over this component.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:buttonMenu instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:menuTrigger",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:menuTriggerLink" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed on the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text to display as a tooltip when the mouse pointer hovers over this component.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:buttonMenu instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:menuTriggerLink",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:message" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether to display an 'x' that will close the alert when clicked. Default value is 'false'.",
        "location": undefined,
        "memberType": undefined,
        "name": "closable",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The severity of the message. Possible values:  message (default), confirm, info, warning, error",
        "location": undefined,
        "memberType": undefined,
        "name": "severity",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The title text for the message.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:notificationsLibrary instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:message",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:outputCheckbox" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The alternate text description when the checkbox is checked. Default value is “True”.",
        "location": undefined,
        "memberType": undefined,
        "name": "altChecked",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The alternate text description when the checkbox is unchecked. Default value is “False”.",
        "location": undefined,
        "memberType": undefined,
        "name": "altUnchecked",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the checkbox is checked.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "boolean",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:input with checkbox type and set readonly to true.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:outputCheckbox",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:outputCurrency" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The ISO 4217 currency code specified as a String, e.g. “USD”.",
        "location": undefined,
        "memberType": undefined,
        "name": "currencyCode",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The currency symbol specified as a String.",
        "location": undefined,
        "memberType": undefined,
        "name": "currencySymbol",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The format of the number. For example, format=“.00” displays the number followed by two decimal places. If not specified, the default format based on the browser's locale will be used.",
        "location": undefined,
        "memberType": undefined,
        "name": "format",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The output value of the currency, which is defined as type Decimal.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "decimal",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:formattedNumber with style set to currency.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:outputCurrency",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:outputDate" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A string (pattern letters are defined in java.text.SimpleDateFormat) used to format the date and time of the value attribute.",
        "location": undefined,
        "memberType": undefined,
        "name": "format",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Deprecated. The language locale used to format date value. It only allows to use the value which is provided by Locale Value Provider, otherwise, it falls back to the value of $Locale.langLocale. It will be removed in an upcoming release.",
        "location": undefined,
        "memberType": undefined,
        "name": "langLocale",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The output value of the date. It should be a date string in ISO-8601 format (YYYY-MM-DD).",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:formattedDateTime instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:outputDate",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:outputDateTime" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A string (pattern letters are defined in java.text.SimpleDateFormat) used to format the date and time of the value attribute.",
        "location": undefined,
        "memberType": undefined,
        "name": "format",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Deprecated. The language locale used to format date value. It only allows to use the value which is provided by Locale Value Provider, otherwise, it falls back to the value of $Locale.langLocale. It will be removed in an upcoming release.",
        "location": undefined,
        "memberType": undefined,
        "name": "langLocale",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The timezone ID, for example, America/Los_Angeles.",
        "location": undefined,
        "memberType": undefined,
        "name": "timezone",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "An ISO8601-formatted string representing a date time.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:formattedDateTime or lightning:formattedTime instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:outputDateTime",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:outputEmail" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The output value of the email",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:formattedEmail instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:outputEmail",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:outputNumber" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The format of the number. For example, format=“.00” displays the number followed by two decimal places. If not specified, the Locale default format will be used.",
        "location": undefined,
        "memberType": undefined,
        "name": "format",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The number displayed when this component is rendered.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "decimal",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:formattedNumber instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:outputNumber",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:outputPhone" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The phone number displayed when this component is rendered.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:formattedPhone instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:outputPhone",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:outputRichText" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates if the URLs in the text are set to render as hyperlinks.",
        "location": undefined,
        "memberType": undefined,
        "name": "linkify",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The formatted text used for output.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:formattedRichText instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:outputRichText",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:outputText" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Displays extra information as hover text.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed when this component is rendered.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:formattedText instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:outputText",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:outputTextArea" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Indicates if the URLs in the text are set to render as hyperlinks.",
        "location": undefined,
        "memberType": undefined,
        "name": "linkify",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text to display.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:formattedText instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:outputTextArea",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:outputURL" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The alternate text description for image (used when there is no label)",
        "location": undefined,
        "memberType": undefined,
        "name": "alt",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The CSS style used to display the icon or image.",
        "location": undefined,
        "memberType": undefined,
        "name": "iconClass",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed on the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The target destination where this rendered component is displayed. Possible values: _blank, _parent, _self, _top",
        "location": undefined,
        "memberType": undefined,
        "name": "target",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text to display as a tooltip when the mouse pointer hovers over this component.",
        "location": undefined,
        "memberType": undefined,
        "name": "title",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The URL of the page that the link goes to.",
        "location": undefined,
        "memberType": undefined,
        "name": "value",
        "type": "string",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:formattedUrl instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:outputURL",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:radioMenuItem" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether the component should be displayed in a disabled state. Default value is \\"false\\".",
        "location": undefined,
        "memberType": undefined,
        "name": "disabled",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Set to true to hide menu after the menu item is selected.",
        "location": undefined,
        "memberType": undefined,
        "name": "hideMenuAfterSelected",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The text displayed on the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "label",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The status of the menu item. True means this menu item is selected; False is not selected.",
        "location": undefined,
        "memberType": undefined,
        "name": "selected",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The concrete type of the menu item. Accepted values are 'action', 'checkbox', 'radio', 'separator' or any namespaced component descriptor, e.g. ns:xxxxmenuItem.",
        "location": undefined,
        "memberType": undefined,
        "name": "type",
        "type": "string",
      },
    ],
    "documentation": "​Deprecated as of API version 47.0. Use lightning:menuItem instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:radioMenuItem",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:scrollerWrapper" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS class applied to the outer element. This style is in addition to base classes output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
    ],
    "documentation": "Creates a container that enables native scrolling in the Salesforce app.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:scrollerWrapper",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "ui:spinner" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
        "location": undefined,
        "memberType": undefined,
        "name": "class",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether or not this spinner should be visible. Defaults to true.",
        "location": undefined,
        "memberType": undefined,
        "name": "isVisible",
        "type": "boolean",
      },
    ],
    "documentation": "Deprecated as of API version 47.0. Use lightning:spinner instead.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "ui:spinner",
    "namespace": "ui",
    "properties": undefined,
    "type": 0,
  },
  "wave:sdk" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
    ],
    "documentation": "Use this component to add access to the Salesforce Einstein Analytics SDK in a Lightning Experience page.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "wave:sdk",
    "namespace": "wave",
    "properties": undefined,
    "type": 0,
  },
  "wave:waveDashboard" => TagInfo {
    "attributes": Array [
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A valid access token obtained by logging into Salesforce. Useful when the component is used by Lightning Out in a non Salesforce domain.",
        "location": undefined,
        "memberType": undefined,
        "name": "accessToken",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The body of the component. In markup, this is everything in the body of the tag.",
        "location": undefined,
        "memberType": undefined,
        "name": "body",
        "type": "component[]",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The unique ID of the dashboard. You can get a dashboard’s ID, an 18-character code beginning with 0FK, from the dashboard's URL, or you can request it through the API.              This attribute can be used instead of the developer name, but it can't be included if the name has been set. One of the two is required.",
        "location": undefined,
        "memberType": undefined,
        "name": "dashboardId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "The unique developer name of the dashboard. You can request the developer name through the API. This attribute can be used instead of the dashboard ID,              but it can't be included if the ID has been set. One of the two is required.",
        "location": undefined,
        "memberType": undefined,
        "name": "developerName",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Adds selections or filters to the embedded dashboard at runtime. The filter attribute is configured using JSON. For filtering by dimension, use this              syntax: {'datasets' : {'dataset1': [ {'fields': ['field1'], 'selection': ['$value1', '$value2']}, {'fields': ['field2'], 'filter': {'operator': 'operator1', 'values': ['$value3', '$value4']}}]}}.              For filtering on measures, use this syntax: {'datasets' : {'dataset1': [ {'fields': ['field1'], 'selection': ['$value1', '$value2']}, {'fields': ['field2'], 'filter': { 'operator': 'operator1',              'values': [[$value3]]}}]}}. With the selection option, the dashboard is shown with all its data, and the specified dimension values are highlighted. With the filter option, the dashboard is              shown with only filtered data. For more information, see https://help.salesforce.com/articleView?id=bi_embed_lightning.htm.",
        "location": undefined,
        "memberType": undefined,
        "name": "filter",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies the height of the dashboard, in pixels.",
        "location": undefined,
        "memberType": undefined,
        "name": "height",
        "type": "integer",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Controls whether or not users see a dashboard that has an error. When this attribute is set to true, if the dashboard has an error, it won’t appear on the page.              When set to false, the dashboard appears but doesn’t show any data. An error can occur when a user doesn't have access to the dashboard or it has been deleted. ",
        "location": undefined,
        "memberType": undefined,
        "name": "hideOnError",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "A flag that is updated when the dashboard is fully loaded on the page",
        "location": undefined,
        "memberType": undefined,
        "name": "isLoaded",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If false, links to other dashboards will be opened in the same window.",
        "location": undefined,
        "memberType": undefined,
        "name": "openLinksInNewWindow",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Id of the current entity in the context of which the component is being displayed.",
        "location": undefined,
        "memberType": undefined,
        "name": "recordId",
        "type": "string",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "Specifies whether or not the component is rendered on the page.",
        "location": undefined,
        "memberType": undefined,
        "name": "rendered",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If true, the dashboard is displayed with a header bar that includes dashboard information and controls. If false, the dashboard appears without a header bar.              Note that the header bar automatically appears when either showSharing or showTitle is true.",
        "location": undefined,
        "memberType": undefined,
        "name": "showHeader",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If true, and the dashboard is shareable, then the dashboard shows the Share icon. If false, the dashboard doesn't show the Share icon. To show the Share icon              in the dashboard, the smallest supported frame size is 800 x 612 pixels.",
        "location": undefined,
        "memberType": undefined,
        "name": "showSharing",
        "type": "boolean",
      },
      AttributeInfo {
        "decorator": undefined,
        "detail": "Aura Attribute",
        "documentation": "If true, the dashboard’s title is included above the dashboard. If false, the dashboard appears without a title.",
        "location": undefined,
        "memberType": undefined,
        "name": "showTitle",
        "type": "boolean",
      },
    ],
    "documentation": "Use this component to add a Salesforce Einstein Analytics dashboard to a Lightning Experience page.",
    "file": null,
    "location": undefined,
    "lwc": false,
    "methods": undefined,
    "name": "wave:waveDashboard",
    "namespace": "wave",
    "properties": undefined,
    "type": 0,
  },
}
`;

exports[`aura indexer 3`] = `
Array [
  "aura",
  "c",
  "clients",
  "flexipage",
  "force",
  "forceChatter",
  "forceCommunity",
  "lightning",
  "lightningcommunity",
  "lightningsnapin",
  "ltng",
  "ui",
  "wave",
]
`;
